{"version":3,"sources":["static/assets/images/logo-est.png","static/assets/tara/tara-logo-et.png","logo.svg","process/Base.tsx","postMessage.tsx","i18n.ts","components/LogRows.tsx","components/MessageLog.tsx","components/Process.tsx","byNameStore.tsx","components/Arena.tsx","components/SendButton.tsx","process/Counter.tsx","components/Popup.tsx","components/Client.tsx","process/TokenRing.tsx","process/client/types.tsx","process/consentService/types.tsx","util.tsx","process/consentService/declarationAPI.tsx","process/consentService/ui.tsx","process/consentService/referenceAPI.tsx","process/serviceProvider/types.tsx","process/consentService/validationAPI.tsx","process/consentService/reportingAPI.tsx","process/serviceProvider/messages.tsx","process/client/messages.tsx","process/client/EnduserUI.tsx","process/client/views.tsx","process/client/constructor.tsx","process/consentService/constructor.tsx","process/consentService/views.tsx","process/serviceProvider/views.tsx","process/serviceProvider/constructor.tsx","config.tsx","components/Theatre.tsx","process/consentService/altUI/backendAPI.tsx","components/veera/footer.tsx","components/veera/header.tsx","components/veera/layout.tsx","components/tabs/Tab.tsx","components/tabs/Tabs.tsx","process/consentService/altUI/ConsentModal.tsx","process/consentService/altUI/MyConsents.tsx","process/consentService/altUI/ConsentHistory.tsx","process/consentService/altUI/CSEnduserUI.tsx","process/consentService/altUI/ria.tsx","App.tsx","serviceWorker.ts","store.tsx","index.tsx","static/assets/images/user-icon.svg","static/assets/images/login.svg"],"names":["module","exports","MESSAGE","handlers","addHandlerClass","impl","c","handler","type","undefined","addHandler","name","p","a","handle","obj","values","createMessage","message","arena","sender","receivers","length","GenericMessageHandler","this","process","action","mem","updateMem","queue","concat","payload","send","error","extra","withResponse","response","uiMap","addUi","url","defaultRender","JSON","stringify","renderers","addRenderer","view","renderer","updateDb","newdb","db","STATE_UPDATE","INITIALIZED","StateUpdateMessage","statusUpdateChannel","StateUpdater","store","ui","_cachedState","_storeUnsubscriber","_messageListener","_channel","URL","window","location","href","open","Math","random","subscribe","stateChanged","processMessage","addEventListener","removeEventListener","state","ps","theatre","arenas","byName","selectProcess","getState","postMessage","origin","e","console","unregisterListeners","msg","data","dispatch","registeredUpdaters","BackendStateUpdater","setter","caster","log","ev","receiveNewState","newState","withUpdater","target","opener","channelId","Object","assign","setState","BackendAPI","updater","m","split","i18n","use","Backend","LanguageDetector","initReactI18next","init","fallbackLng","debug","backend","loadPath","pathname","includes","interpolation","escapeValue","__","props","labels","suffix","join","proc","t","map","pref","styleNameFor","fullname","id","prop","replace","person","business","formatProcess","className","formatProcessList","names","r","i","formatBody","max","key","value","substring","defaultRenderer","owner","formatHeader","LogRow","showPopup","onClick","findLogRenderer","addLogRenderers","keys","forEach","addLogRenderer","LogView","ref","React","filterFn","showSelf","current","scroll","scrollHeight","index","_this","show","onHide","closePopup","size","Body","Footer","Button","variant","logLines","rows","filter","slice","maxRows","popup","line","formatLogLine","MessageLog","connect","ownProps","selectArena","LogButton","Header","Title","ModalFooter","children","render","findRenderer","ProcessUI","preventDefault","alert","UILink","button","useStore","launch","push","registerListeners","launchUI","el","addByName","old","allNames","n","reduceByName","reducer","k","fromArray","reduce","MESSAGE_DELAY","createProcess","reduceProcesses","CREATE_PROCESS","FLUSH_QUEUE","reduceArena","reduceMessage","queueListener","queued","flat","d","getQueued","setTimeout","delayedSender","shift","now","Date","Arena","useTranslation","processes","role","parseOrRaw","s","startsWith","parse","f","Array","from","elements","u","out","options","selected","checked","o","Send","messageToAction","currentTarget","form","handleClick","title","text","SimpleSend","Counter","CounterDefaultView","IncrementMessageHandler","DecrementMessageHandler","incrementMessage","decrementMessage","Popup","LOGIN","alt","src","require","ClientView","loading","changeView","aria-hidden","width","TokenNode","WithToken","WithoutToken","createTokenNode","next","token","initPassMessage","node","tokenMessage","updateNextMessage","SetTargetPopup","setShow","handleClose","handleShow","closeButton","htmlFor","readOnly","multiple","defaultValue","bsPrefix","Client","ClientIS","ClientDefaultView","ConsentService","ConsentServiceDefaultView","findFrom","items","example","find","hash","input","createHash","update","digest","address2org","address","match","renderText","stack","last","indent","l","prefix","pop","ul","addServiceDeclaration","cs","sd","serviceDeclarations","decl","serviceProviderId","serviceDeclarationId","withErrorResponse","withOkResponse","addPurposeDeclaration","pd","purposeDeclarations","clientId","purposeDeclarationId","services","sdRef","loginMessage","user","giveConsentMessage","con","consents","newConsent","dataSubject","revoked","updatedCS","addConsent","activeUser","activePurposeDeclaration","updatedCS2","setActivePD","callbackURL","fetchConsentReference","revokeConsentMessage","consentReference","validUntil","revokeAt","revokeIfReferenceEquals","revokeConsent","updateAPDforUser","refs","activatePurposeDeclarationMessage","ConsentReferenceResponseTypeName","fixRevoked","getConsentReference","req","_cs","consent","subjectId","ServiceProviderIS","ServiceProviderDefaultView","requestTypeName","responseTypeName","ValidationResponseTypeName","NotValidResponse","asyncId","valid","validateConsentReference","notValid","validFrom","purposeDeclaration","consentExpiration","toISOString","dataSubjectId","reportServiceUse","usageLog","addUsageRecord","addData","spis","datatype","rec","dbrec","subject","declareService","consentService","requestId","service","requestReference","serviceName","submitRequest","_send","report","result","serviceDeclarationIds","requiredServiceDeclarationIds","usageTime","clientAddress","reqState","validationRequestId","withInfligh","inflight","partyId","ifr","resp","removeInflight","usageReport","submitResponse","records","x","returnedDatatypes","selectServiceMessage","cachedConsentRefs","consentRefByUser","cachedConsentRef","consentServiceId","declarePurpose","cis","updateCSRef","csByUser","executeRequest","userConsentRefs","purposeId","conf","config","serviceAddress","_cis","newResponses","requestReferenceId","__cis","generateRequestReference","dumpConsentRefCache","validateConsentRef","SELECT_SERVICE","WAIT_FOR_CONSENT_REF","CONSENT_NOT_FOUND","SERVICE_V1","currentView","ClientView_","sendMessagesFor","withMessages","componentDidUpdate","actualView","returnButton","dangerouslySetInnerHTML","__html","EnduserUI","DeclarePurposePopup","sp","setOpts","useState","sdrefs","setSDRefs","declTemplate","onChange","decls","declId","description","prefillPurposeDeclaration","dt","sdref","placeholder","opts","spId","_spId","sdId","_sdId","addSDRef","hasUser","consentRefCount","purpose","countConsentRefs","responseCount","consentRef","consentRefDesc","purposeView","updateMaxDuration","v","declarationPrefill","technicalDescription","needSignature","md","consentMaxDurationSeconds","prefillServiceDeclaration","DeclareServicePopup","allValues","sort","CS1Address","defaultArena","createServiceProvider","createData","diagnoos","arst","uuring","vastus","haigus","preparaat","seeria","jrk","uuesti","createConsentService","logRenderers","createCounter","initialTheatre","createArena","active","SELECT_ARENA","_Theatre","PureComponent","Theatre","ConsentServiceBackend","post","getServiceDeclaration","getValidUntil","floor","getConsents","ur","candidate","expiresIn","Number","CSBackend","createContext","ctx","useContext","rel","backendUse","login","VeeraLayout","Tab","label","activeTab","style","cursor","Component","Tabs","onClickTabItem","tab","child","ConsentModal","buttonText","dec","rowView","formatTimestamp","isConsentActive","handleRevoke","MyConsents","Table","header","consentDescription","ConsentHistory","getUsageLogRecords","usageRecordDescription","Modal","ActivePurposeDeclaration","signPopup","returnPopup","showConsentTab","bind","savedClientId","tabRef","toggleSignPopup","giveConsentByPurpose","activeDecl","showReturnPopup","close","ReturnScreen","Popover","MainView","getActivePurposeDeclaration","CSEnduserUI","context","backendLink","csb","createRef","document","body","classList","add","resetState","Provider","timestamp","withTime","Intl","DateTimeFormat","year","month","day","hour","minute","second","format","Ria","aria-label","data-tab","click","version","xmlns","viewBox","Page","changeLanguage","lng","basename","path","language","Loader","App","fallback","Boolean","hostname","rootReducer","combineReducers","middlewares","thunkMiddleware","middleWareEnhancer","applyMiddleware","createStore","composeWithDevTools","su","source","registerGlobalListener","configureStore","ReactDOM","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f8a92c4f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo-est.bca08fff.png\";","module.exports = __webpack_public_path__ + \"static/media/tara-logo-et.5947b56d.png\";","module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","import { AnyAction } from 'redux';\n\nexport type InstanceName = string;\nexport type ProcessImplName = string;\nexport type ViewName = string;\n\n// state\n\nexport interface ProcessState<S> {\n\tname: string; // instantsi nimi\n\ttitle: string;\n\ttype: ProcessImplName; // implementatsiooni nimi?\n\tview: ViewName; // \"olek\", tegelikult defineerib vaate\n\tmem: S; // sisuline olek\n\tqueue: Message<any>[]; // outbound queue, reduceritest kasutamiseks?\n}\n\n// sõnumi-action\n\nexport const MESSAGE = \"Process/SEND_MESSAGE\";\n\nexport interface Message<PL extends Payload> extends AnyAction {\n\ttype: typeof MESSAGE;\n\tarena: string;\n\tsender: string;\n\treceivers: string[];\n\tmessage: PL;\n\tnow?: number;\n\trandom?: string;\n}\n\nexport interface Payload {\n\ttype: string;\n}\n\nexport interface ErrorPayload extends Payload {\n\ttype: \"error\";\n\terror: string;\n}\n\nexport interface OKPayload extends Payload {\n\ttype: \"ack\"\n\tresponse: \"OK\";\n}\n\nexport type MessageHandler<S, M extends Payload> = (process: ProcessState<S>, action: Message<M>) => ProcessState<S>;\n\nconst handlers : { [impl: string] : { [type: string]: MessageHandler<any, any> } } = {};\n\nexport function addHandler<P extends Payload>(impl: ProcessImplName, type: string, handler: MessageHandler<any, P>) {\n\tif (handlers[impl] === undefined) {\n\t\thandlers[impl] = {};\n\t}\n\n\thandlers[impl][type] = handler;\n}\n\nexport function addHandlerClass<P extends Payload, T extends GenericMessageHandler<any, ProcessState<any>, P, T>>(impl: ProcessImplName, c: { new(): T }) {\n\tlet handler = new c();\n\taddHandler<P>(impl, handler.name, (p, a) => handler.handle(p, a));\n\treturn (obj?: Partial<P>) => ( (values?: Partial<P>) => handler.createMessage({...(values === undefined ? {} : values), ...(obj === undefined ? {} : obj)}) );\n}\n\nexport function reduceMessage<T>(process: ProcessState<T>, action: Message<Payload>): ProcessState<T> {\n\t//\tconsole.log(`reduceMessage ${JSON.stringify(process)}, ${JSON.stringify(action)}`);\n\tif (action.type !== MESSAGE || !action.receivers.includes(process.name)) {\n\t\treturn process;\n\t}\n\n\tif (handlers[process.type] === undefined) {\n\t\tconsole.error(`No handler for ${process.name} (${process.type})`);\n\t\treturn process;\n\t}\n\n\tif (handlers[process.type][action.message.type] === undefined) {\n\t\tconsole.error(`No handler for ${process.name} (${process.type}) for message ${action.message.type} (${JSON.stringify(action.message)})`);\n\t\treturn process;\n\t}\n\n\treturn handlers[process.type][action.message.type](process, action);\n}\n\nexport function message<M extends Payload>(arena: string, sender: ProcessState<any>, receivers: string[], message: M): Message<M> {\n\treturn { \n\t\ttype: MESSAGE,\n\t\tarena: arena,\n\t\tsender: sender.name, \n\t\treceivers: receivers.length === 0 ? [sender.name] : receivers,\n\t\tmessage: message\n\t};\n}\n\nexport abstract class GenericMessageHandler<S, PS extends ProcessState<S>, M extends Payload, GMH extends GenericMessageHandler<S, PS, M, GMH>> {\n\tabstract name: string;\n\n\tcreateMessage(obj: any): (M & { type: GMH[\"name\"] }) { return { ...obj, type: this.name }; };\n\thandle(process: PS, action: Message<M>): PS { return { ...process, mem: this.updateMem(process.mem, action) }; };\n\tupdateMem(mem: S, action: Message<M>): S { return mem; };\n\n\tsend<NM extends Payload>(process: PS, message: Message<NM>): PS {\n\t\treturn { ...process, queue: process.queue.concat(message) };\n\t}\n\n\twithResponse<NM extends Payload>(process: PS, action: Message<M>, payload: NM): PS {\n\t\treturn this.send(process, message<NM>(action.arena, process, [action.sender], payload));\n\t}\n\n\twithErrorResponse(process: PS, action: Message<M>, error: string, extra?: any) {\n\t\treturn this.withResponse<ErrorPayload>(process, action, { type: \"error\", error: error, ...extra });\n\t}\n\n\twithOkResponse(process: PS, action: Message<M>) {\n\t\treturn this.withResponse<OKPayload>(process, action, { type: \"ack\", response: \"OK\"});\n\t}\n\t\n}\n\n\n// UId\nexport const uiMap : { [type: string /* ProcessImplName */]: string /* URL */ } = {};\n\nexport function addUi(impl: ProcessImplName, url: string) {\n\tuiMap[impl] = url;\n}\n\n// renderdus\n\nexport interface ProcessAndArena<S> {\n\tprocess: ProcessState<S>;\n\tarena: string;\n}\n\nexport type ProcessRenderer<S> = React.FC<ProcessAndArena<S>> | ((props: ProcessAndArena<S>) => string);\n\nconst defaultRender: ProcessRenderer<any> = ({process} : ProcessAndArena<any>) => JSON.stringify(process.mem);\n\nconst renderers : { [impl: string /* ProcessImplName */]: { [view: string /* ViewName */]: ProcessRenderer<any> } } = {};\n\nexport function addRenderer(impl: ProcessImplName, view: ViewName, renderer: ProcessRenderer<any>) {\n\tif (renderers[impl] === undefined) {\n\t\trenderers[impl] = {};\n\t}\n\n\trenderers[impl][view] = renderer;\n}\n\nexport function findRenderer<S>(process: ProcessState<S>): ProcessRenderer<S> {\n\tif (renderers[process.type] === undefined) {\n\t\tconsole.error(`No renderer for ${process.type}`);\n\t\treturn defaultRender;\n\t}\n\n\tif (renderers[process.type][process.view] === undefined) {\n\t\tconsole.error(`No renderer for ${process.type} and view ${process.view}`);\n\t\treturn defaultRender;\n\t}\n\n\treturn renderers[process.type][process.view];\n}\n\nexport function updateMem<S>(process: ProcessState<S>, mem: Partial<S>): ProcessState<S> {\n\treturn { ...process, mem: { ...process.mem, ...mem }};\n}\n\nexport function updateDb<T, S extends ({ db: T; })>(process: ProcessState<S>, newdb: Partial<T>): ProcessState<S> {\n\treturn updateMem<S>(process, { db: { ...process.mem.db, ...newdb} } as Partial<S>);\n}","import { Store } from 'redux';\nimport { InstanceName, ViewName, MESSAGE, Message, Payload } from './process/Base';\nimport { AppState } from './store';\n\nexport const STATE_UPDATE = \"STATE_UPDATE\";\nexport const INITIALIZED = \"INITIALIZED\";\n\ntype MessagingTarget = Window | ServiceWorker | null;\n\nexport class StateUpdateMessage<P> {\n    type!: typeof STATE_UPDATE;\n    view!: ViewName;\n    mem?: P;\n    statusUpdateChannel?: number;\n}\n\nfunction selectProcess(state: AppState, arena: string, process: InstanceName): StateUpdateMessage<any> {\n    let ps = state.theatre.arenas.byName[arena].process.byName[process];\n    if (ps === undefined) {\n        // no such process?\n        return { type: STATE_UPDATE, view: \"\" };\n    }\n    return { type: STATE_UPDATE, view: ps.view, mem: ps.mem}\n}\n\nclass StateUpdater {\n    arena: string;\n    process: InstanceName;\n    store: Store;\n    url: URL;\n    ui: MessagingTarget;\n\n    _cachedState: any;\n    _storeUnsubscriber: any = null;\n    _messageListener: ((message: MessageEvent) => any) | null = null;\n    _channel: number;\n\n    constructor(arena: string, process: InstanceName, store: Store, url: string, ui?: MessagingTarget) {\n        this.arena = arena;\n        this.process = process;\n        this.store = store;\n        this.url = new URL(url, window.location.href);\n        if (ui === undefined) {\n            this.ui = window.open(url, `${arena} - ${process}`);\n        } else {\n            this.ui = ui;\n        }\n        this._channel = Math.random();\n    }\n\n    registerListeners() {\n        this._storeUnsubscriber = this.store.subscribe(() => { this.stateChanged(); })\n        this._messageListener = (message) => { this.processMessage(message); };\n        window.addEventListener(\"message\", this._messageListener);\n        return this;\n    }\n\n    unregisterListeners() {\n        this._storeUnsubscriber();\n        this._storeUnsubscriber = null;\n\n        if (this._messageListener !== null) {\n            window.removeEventListener(\"message\", this._messageListener);\n            this._messageListener = null;\n        }\n\n        return this;\n    }\n\n    stateChanged() {\n        let state = selectProcess(this.store.getState(), this.arena, this.process);\n        if (state !== this._cachedState) {\n            // postMessage originiga, mis ei ole \"*\" ei tööta ffga?\n            // https://developer.mozilla.org/en-US/docs/Web/API/Window/postMessage#Example lõpp\n            try { \n            this.ui!.postMessage({...state, statusUpdateChannel: this._channel}, this.url.origin);\n            } catch (e) {\n                console.error(\"Error posting message, stopping\", e);\n                this.unregisterListeners();\n            }\n            this._cachedState = state;\n        }\n        return this;\n    }\n\n    processMessage(msg: MessageEvent): void {\n        switch (msg.data.type) {\n            case INITIALIZED:\n                this._cachedState = undefined; // force state update\n                this.stateChanged();\n                return;\n\n            default:\n                if (msg.data.statusUpdateChannel !== this._channel) {\n                    // not for us. \n                    return;\n                }\n\n                // only messages to self.\n                this.store.dispatch({ \n                    type: MESSAGE, \n                    arena: this.arena,\n                    sender: this.process,\n                    receivers: [this.process],\n                    message: { ...msg.data, statusUpdateChannel: undefined },\n                } as Message<Payload>);\n        }\n    }\n}\n\nconst registeredUpdaters : StateUpdater[] = [];\n\nexport function registerGlobalListener(store: Store) {\n    window.addEventListener(\"message\", ev => {\n        if (ev.data.type === INITIALIZED) {\n            let [arena, process] = ev.data.target.split(' - ');\n            let url = ev.data.url;\n            if (registeredUpdaters.find(su => su.arena === arena && su.process === process && su.ui === ev.source) === undefined) {\n                console.log(\"Unregistered childwindow, registering: \", ev.data);\n                registeredUpdaters.push(\n                    new StateUpdater(arena, process, store, url, ev.source as Window)\n                    .registerListeners()\n                    .stateChanged()\n                );\n                ev.preventDefault();\n            }\n        }\n    });\n}\n\nexport function launchUI(arena: string, process: InstanceName, url: string, store: Store) {\n    registeredUpdaters.push(new StateUpdater(arena, process, store, url).registerListeners());\n}\n\n\nexport class BackendStateUpdater<S, C extends BackendAPI<S>> {\n    state!: StateUpdateMessage<S>;\n\n    setter: (newState: BackendAPI<S>) => void;\n    caster: { new(s: StateUpdateMessage<S>): C };\n\n    constructor(setter: (newState: BackendAPI<S>) => void, caster: { new(s: StateUpdateMessage<S>): C }) {\n        this.setter = setter;\n        this.caster = caster;\n        console.log(\"setting listener\");\n        window.addEventListener(\"message\", (ev) => { this.receiveNewState(ev); });\n    }\n\n    setState(newState: StateUpdateMessage<S>) {\n        console.log(\"updating state:\", newState);\n        this.state = newState;\n        this.setter(new this.caster(newState).withUpdater(this));\n    }\n\n    resetState() {\n        this.postMessage(INITIALIZED, { target: window.name, url: window.location.href });\n    }\n\n    postMessage(type: string, message?: any) {\n        if (window.opener === null) {\n            this.setState({ type: STATE_UPDATE, view: \"\", mem: { \"error\": \"NO OPENER WINDOW\"}} as any);\n            return;          \n        }\n\n        const channelId = this.state !== undefined ? { statusUpdateChannel: this.state.statusUpdateChannel } : {};\n\n        let msg = Object.assign({}, (message === undefined ? {} : message), { type }, channelId);\n        console.log(\"posting message:\", msg);\n        window.opener.postMessage(msg);\n    }\n\n    receiveNewState(ev: MessageEvent) {\n        if (ev.data.type === STATE_UPDATE) {\n            this.setState(ev.data);\n        }\n    }\n}\n\nexport class BackendAPI<S> extends StateUpdateMessage<S> {\n    updater!: BackendStateUpdater<S, BackendAPI<S>>;\n\n    constructor(msg?: StateUpdateMessage<S>) {\n        super();\n        Object.assign(this, msg);\n    }\n\n    withUpdater(updater: BackendStateUpdater<S, BackendAPI<S>>) {\n        this.updater = updater;\n        return this;\n    }\n\n    post(msg: () => Payload) {\n        let m = msg();\n        this.updater.postMessage(m.type, m);\n    }  \n\n\n    arena(): string {\n        return window.name.split(\" - \")[0];\n    }\n}\n","import i18n from 'i18next';\nimport Backend from 'i18next-xhr-backend';\nimport LanguageDetector from 'i18next-browser-languagedetector';\nimport { initReactI18next } from 'react-i18next';\nimport { ProcessAndArena, ProcessState } from './process/Base';\n\ni18n\n  // load translation using xhr -> see /public/locales\n  // learn more: https://github.com/i18next/i18next-xhr-backend\n  .use(Backend)\n  // detect user language\n  // learn more: https://github.com/i18next/i18next-browser-languageDetector\n  .use(LanguageDetector)\n  // pass the i18n instance to react-i18next.\n  .use(initReactI18next)\n  // init i18next\n  // for all options read: https://www.i18next.com/overview/configuration-options\n  .init({\n    fallbackLng: 'et',\n    debug: process.env.NODE_ENV !== \"production\",\n    backend: {\n      loadPath: (window.location.pathname.includes(\"/ui/\") ? \"../../\" : \"\") + 'locales/{{lng}}/{{ns}}.json'\n    },\n    \n    interpolation: {\n      escapeValue: false, // not needed for react as it escapes by default\n    },\n  });\n\nexport default i18n;\n\nexport function _(...labels: string[]): string {\n  return i18n.t(labels.join(\".\"));\n}\n\nexport function __(props: ProcessAndArena<any>, ...labels: string[]): string {\n  const suffix = labels.join(\".\");\n  const arena = props.arena;\n  const proc = props.process.name;\n  const impl = props.process.type;\n  return i18n.t([\n    [ arena, proc ],\n    [ arena, impl ],\n    [ impl ],\n    []\n  ].map(pref => pref.concat(suffix).join(\".\")));\n}\n\nexport function styleNameFor(arena: string, name: string, type?: string): string {\n  return __({ arena: arena, process: { name: name, type: type! } as ProcessState<any> }, \"stylename\");\n}\n\nexport function person(id: string, prop: string): string {\n  return i18n.t([`person.${id}.${prop}`, `person.default.${prop}`]).replace(\"ISIKUKOOD\", id);\n}\n\nexport function fullname(id: string): string {\n  return person(id, \"name\");\n}\n\nexport function business(id: string, prop: string): string {\n  return i18n.t(`business.${id}.${prop}`);\n}\n","import { Message, ProcessState, Payload } from \"../process/Base\";\nimport React from \"react\";\nimport { styleNameFor } from \"../i18n\";\n\n\nexport function receivers(receivers: string[]) {\n    return receivers.length === 1 ? receivers[0] : `(${receivers.join(\", \")})`;\n}\n\nfunction formatProcess(arena: string, name: string) {\n    return (<span className={`msg-${ styleNameFor(arena, name) }`}>\n        { name }\n    </span>)\n}\n\nfunction formatProcessList(arena: string, names: string[]) {\n    if (names.length === 1) {\n        return formatProcess(arena, names[0]);\n    } else {\n        return (<>({ names.map(\n            (r, i) => (\n                <>{ i === 0 ? \", \" : undefined }{ formatProcess(arena, r) }</>\n            )\n        ) })</>)\n    }\n}\n\nfunction formatHeader(msg: Message<Payload>, owner?: ProcessState<any>) {\n\tif (owner === undefined) {\n\t\treturn (\n            <>\n            { formatProcess(msg.arena, msg.sender) }\n            <span> » </span>\n            { formatProcessList(msg.arena, msg.receivers) }\n            </>\n        )\n\t} else {\n        return (\n            (msg.sender === owner.name) \n                ? <><span>» </span>{ formatProcessList(msg.arena, msg.receivers) }</>\n                : <><span>« </span>{ formatProcess(msg.arena, msg.sender) }</>\n        );\n\t}\n}\n\nfunction cutJson(max: number) {\n    return (key: string, value: any) => (\n        typeof value !== \"string\" \n            ? value \n            : (value.length > max ? value.substring(0, max) + \"...\" : value)\n        );\n}\n\nfunction formatBody<M extends Payload>(msg: M) {\n\treturn `${msg.type}: ${JSON.stringify({ ...msg, type: undefined, statusUpdateChannel: undefined }, cutJson(40), \"  \")}`;\n}\n\nfunction defaultRenderer(arena: string, msg: Message<any>, owner?: ProcessState<any>) {\n    return (<>{formatHeader(msg, owner)}: {formatBody(msg.message)}</>);\n}\n\nexport function LogRow(arena: string, i: number, msg: Message<any>, owner: (ProcessState<any> | undefined), showPopup: (msg: Message<any>) => void) {\n    return (<span onClick={ev => showPopup(msg)}>\n        { findLogRenderer(arena, msg)(arena, msg, owner) }\n    </span>);\n}\n\nexport type LogRenderer = (arena: string, msg: Message<any>, owner?: ProcessState<any>) => any;\nconst renderers : { [arena: string]: { [type: string]: LogRenderer } } = {};\n\nfunction findLogRenderer(arena: string, msg: Message<any>): LogRenderer {\n    if (renderers[arena] === undefined) {\n        return defaultRenderer;\n    }\n\n    if (renderers[arena][msg.message.type] === undefined) {\n        return defaultRenderer;\n    }\n\n    return renderers[arena][msg.message.type];\n}\n\nexport function addLogRenderer(arena: string, type: string, renderer: LogRenderer) {\n    if (renderers[arena] === undefined) {\n        renderers[arena] = {};\n    }\n\n    renderers[arena][type] = renderer;\n}\n\nexport type LogRendererMap = { [type: string]: LogRenderer };\n\nexport function addLogRenderers(arena: string, r: LogRendererMap) {\n    Object.keys(r).forEach(type => addLogRenderer(arena, type, r[type]))\n}\n\n////////////////////////\n\nexport const consentRefApiLogRenderers : LogRendererMap = {\n    // \"CS/getConsentReference\": (a, m) => `Rakendus ${m.sender} kysib nousolekuteenuselt ${receivers(m.receivers)} nqusolekuviidet isiku ${m.message.subjectId} ja eesmargideklaratsiooni ${m.message.purposeDeclarationId} kohta.`\n}\n","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { ProcessState, Message, Payload } from '../process/Base';\nimport { AppState } from '../store';\nimport { selectArena } from './Theatre';\nimport { LogRow, receivers } from './LogRows';\nimport { Modal, Button, ModalFooter } from 'react-bootstrap';\nimport { __ } from '../i18n';\n\ninterface LogProps {\n  arena: string;\n  owner?: ProcessState<any>;\n  showSelf?: boolean;\n  maxRows?: number;\n  rows?: Message<any>[];\n  t?: any;\n  className?: string;\n}\n\n\nclass LogView extends React.Component<LogProps> {\n\n  ref: React.RefObject<any> = React.createRef();\n\n  state = {\n    msg: undefined as (Message<any> | undefined)\n  }\n\n  closePopup() {\n    this.setState({ msg: undefined });\n  }\n\n  showPopup(msg: Message<any>) {\n    this.setState({ msg });\n  }\n\n  componentDidUpdate() {\n    if (this.ref.current) this.ref.current.scroll(0, this.ref.current.scrollHeight);\n  }\n\n  filterFn : (msg: Message<Payload>) => boolean = (msg) => {\n    if (msg.receivers.length === 1 && msg.receivers.includes(msg.sender) && !this.props.showSelf) {\n      return false;\n    }\n\n    if (this.props.owner !== undefined && !(msg.sender === this.props.owner.name || msg.receivers.includes(this.props.owner.name))) {\n      return false;\n    }\n\n    return true;\n  }\n\n  formatLogLine(msg: Message<Payload>, index: number, owner?: ProcessState<any>) {\n    const _this = this;\n    return (<li className=\"log-item\" key={index}>\n      { LogRow(this.props.arena, index, msg, owner, msg => { _this.showPopup(msg) }) }\n    </li>);\n  }\n\n  popup() { \n    const msg = this.state.msg;\n    const _this = this;\n    const t = this.props.t || ((a: string) => a);\n\n    return (\n      <Modal show={msg !== undefined} onHide={() => _this.closePopup()} size=\"lg\">\n        <Modal.Body>\n        { msg === undefined ? \"No message?\" : (\n        <div>\n          <div className=\"row\">\n            <h4>Saatja:</h4>\n            <p>{ msg!.sender }</p>\n          </div>\n          <div className=\"row\">\n            <h4>Saaja:</h4>\n            <p>{ receivers(msg!.receivers) }</p>\n          </div>\n          <div className=\"row\">\n            <h4>Tüüp:</h4>\n            <p>{ msg!.message.type }</p>\n          </div>\n          <div className=\"col\">\n            <pre className=\"text-left\">\n              { JSON.stringify({ ...msg, type: undefined, statusUpdateChannel: undefined, arena: undefined }, undefined, \"  \") }\n            </pre>\n          </div>\n        </div>\n        ) }\n        </Modal.Body>\n        <Modal.Footer>\n        <Button variant=\"secondary\" onClick={(ev: any) => _this.closePopup()}>{ t('close') }</Button>\n        </Modal.Footer>\n      </Modal>\n      );\n  }\n\n  render() {\n    const logLines = (this.props.rows!\n      .filter(this.filterFn)\n      .slice(-(this.props.maxRows || 4)));\n\n    if (logLines.length === 0) {\n      return <span className=\"no-msg-log\">{ __({arena: this.props.arena, process: (this.props.owner || {}) as ProcessState<any> }, \"no-log-lines\") }</span>;\n    }\n\n    return (\n      <>\n      { this.popup() }\n      <samp className=\"msg-log\" ref={this.ref}>\n        <ul className=\"log-view\">\n          { logLines.map((line, index) => this.formatLogLine(line, index, this.props.owner)) }\n        </ul>\n      </samp>\n      </>\n      );\n  }\n}\n\nfunction mapStateToProps(state: AppState, ownProps: LogProps) {\n  return { rows: selectArena(state, ownProps.arena).log };\n}\n\nexport const MessageLog = connect(mapStateToProps)(LogView);\n\n\nexport class LogButton extends React.PureComponent<LogProps, { show: boolean }> {\n  state = { show: false };\n\n  render() {\n    const t = this.props.t;\n    return (<>\n      <Modal show={this.state.show} onHide={() => this.setState({ show: false })} size=\"lg\">\n        <Modal.Header>\n          <Modal.Title>{ __({ arena: this.props.arena, process: this.props.owner! }, \"log\") }: { \n            this.props.owner !== undefined ? __({arena: this.props.arena, process: this.props.owner}, \"title\") : <></> }</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <div className=\"msg-log-popup\">\n            <MessageLog {...this.props} />\n          </div>\n        </Modal.Body>\n        <ModalFooter>\n          <Button variant=\"secondary\" onClick={(ev: any) => this.setState({ show: false })}>{ t('close') }</Button>\n        </ModalFooter>\n      </Modal>\n      <Button className={this.props.className} onClick={(ev: any) => this.setState({ show: true }) }>{ this.props.children }</Button>\n    </>)\n  }\n}","import * as React from 'react';\n\nimport { ProcessState, ProcessRenderer, findRenderer, uiMap } from '../process/Base';\nimport { useStore } from 'react-redux';\nimport { launchUI } from '../postMessage';\nimport { __ } from '../i18n';\nimport { LogButton } from './MessageLog';\n\nfunction render<S>({process, arena}: ProcessUIProps<S>): ReturnType<ProcessRenderer<S>> {\n\treturn (findRenderer(process))({process, arena});\n}\n\n// Protsessi-kasti komponent. \n\nexport interface ProcessUIProps<S> {\n\tprocess: ProcessState<S>;\n\tarena: string; // current arena.\n\tchildren?: any;\n\tbutton?: boolean;\n}\n\n\nexport function ProcessUI({process, arena}: ProcessUIProps<any>) {\n\tconst t = (...keys: string[]) => __({arena, process}, ...keys);\n\treturn (\n\t\t<div className=\"col\">\n\t\t\t<div className={`card process style-${ t('stylename') }`} id={`proc-${process.name}`}>\n\t\t\t  <div className=\"card-header\">\n\t\t\t\t\t<span\n\t\t\t\t\t\tclassName=\"process-name\"\n\t\t\t\t\t\tonClick={ev => {ev.preventDefault(); alert(JSON.stringify(process, undefined, \"  \"))}}>\n\t\t\t\t\t\t\t{ t(\"title\") }\n\t\t\t\t\t</span>\n\t\t\t\t\t<LogButton arena={arena} owner={process} showSelf={true} maxRows={100} t={t} className=\"btn-log btn-light btn-sm\">log</LogButton>\n\t\t\t  </div>\n\t\t\t  <div className=\"card-body\">\n\t\t\t\t\t<span className=\"process-state\">{ render({process, arena}) }</span>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t);\n}\n\nexport function UILink({arena, process, children, button }: ProcessUIProps<any>) {\n\tconst store = useStore();\n\tfunction launch() {\n\t\tlaunchUI(arena, process.name, uiMap[process.type], store);\n\t}\n\n\tconst el = button === true ? 'button' : 'div'\n\n\tif (uiMap[process.type] === undefined) {\n\t\treturn <></>;\n\t} else {\n\t\treturn React.createElement(el, {\n\t\t\tclassName: button !==  true ? \"process-uilink\" : \"btn btn-primary\",\n\t\t\tonClick: () => launch()\n\t\t}, children === undefined ? \"\\u2398\" : children);\n\t}\n}\n\n","\ntype NamedObject = { name: string };\n\nexport interface ByNameStore<T extends NamedObject> {\n\tbyName: { [k: string]: T },\n\tallNames: string[];\n}\n\nexport function addByName<T extends NamedObject>(old: ByNameStore<T> = emptyStore(), init: T): ByNameStore<T> {\n\treturn {\n\t\tbyName: { ...old.byName, [init.name]: init },\n\t\tallNames: old.allNames.filter(n => n !== init.name).concat(init.name),\n\t}\n}\n\nexport function reduceByName<T extends NamedObject>(old: ByNameStore<T> = emptyStore(), reducer: (i: T) => T): ByNameStore<T> {\n\treturn {\n\t\t...old,\n\t\tbyName: Object.assign({}, ...old.allNames.map((k) => ({[k]: reducer(old.byName[k])})))\n\t}\n}\n\nexport function emptyStore<T extends NamedObject>(): ByNameStore<T> {\n    return { byName: {}, allNames: [] };\n}\n\nexport function fromArray<T extends NamedObject>(a: T[]): ByNameStore<T> {\n\treturn a.reduce(addByName, emptyStore());\n}","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Store } from 'redux';\n\nimport { ProcessState, MESSAGE, Message, reduceMessage } from '../process/Base';\n\nimport { ProcessUI } from './Process';\nimport { MessageLog } from './MessageLog';\n\nimport { ByNameStore, addByName, reduceByName, fromArray } from '../byNameStore';\nimport { AppState } from '../store';\nimport { selectArena } from './Theatre';\nimport { useTranslation } from 'react-i18next';\n\n// Arena -- ports protsesse, mis omavahel sõnumeid vahetavad. \n// arenal on nimi?\n\nconst MESSAGE_DELAY = 300; // ms\n\n\ntype ProcessStore = ByNameStore<ProcessState<any>>;\nconst createProcess: (old : ProcessStore, init: ProcessState<any>) => ProcessStore = addByName;\nconst reduceProcesses: (old: ProcessStore, reducer: (p: ProcessState<any>) => ProcessState<any>) => ProcessStore = reduceByName;\n\nexport interface ArenaState {\n  name: string;\n  process: ProcessStore;\n  log: Message<any>[];\n}\n\nexport function createArena(name: string, ps: ProcessState<any>[]): ArenaState {\n  return { name: name, process: fromArray(ps), log: [] };\n}\n\nexport const CREATE_PROCESS = \"Arena/CREATE_PROCESS\"; \n\nexport interface CreateProcess {\n  type: typeof CREATE_PROCESS;\n  arena: string; \n  process: ProcessState<any>;\n}\n\nexport const FLUSH_QUEUE = \"Arena/FLUSH_QUEUE\";\nexport interface FlushQueue {\n  type: typeof FLUSH_QUEUE;\n  arena: string;\n}\n\nexport type ArenaActionType = CreateProcess | FlushQueue | Message<any>;\n\n\nexport function reduceArena(state: ArenaState, action: ArenaActionType): ArenaState {\n  if (action.arena !== state.name) {\n    return state;\n  }\n\n  switch (action.type) {\n    case CREATE_PROCESS:\n      return { ...state, process: createProcess(state.process, action.process) };\n    case FLUSH_QUEUE:\n      return { ...state, process: reduceProcesses(state.process, (p) => ({ ...p, queue: [] })) };\n    case MESSAGE:\n      return { ...state, process: reduceProcesses(state.process, (p) => reduceMessage(p, action)), log: state.log.concat([action])  };\n    default:\n      return state;\n  }\n}\n\nfunction getQueuedForArena(p: ProcessStore): Message<any>[] {\n  return p.allNames.map((n) => p.byName[n].queue).flat(1).filter((d) => d !== undefined);\n}\n\nfunction getQueued(arenas: ByNameStore<ArenaState>): Message<any>[] {\n  return arenas.allNames.map(n => getQueuedForArena(arenas.byName[n].process)).flat(1);\n}\n\nexport function queueListener(store: Store) {\n  let queued = getQueued(store.getState().theatre.arenas);\n\n  if (queued.length === 0) {\n    return;\n  }\n\n  let arenas = Object.keys(Object.assign({}, ...queued.map((m) => ({ [m.arena]: 1 }))))\n\n  arenas.forEach((a) => store.dispatch({ type: FLUSH_QUEUE, arena: a } as FlushQueue ));\n\n  // queued.forEach((m) => store.dispatch(m));\n\n  const delayedSender = (store: Store, queue: Message<any>[]) => {\n    if (queue.length > 0) {\n      store.dispatch({ ...queue.shift()!, now: (Date.now() / 1000) | 0, random: \"\" + Math.random() });\n\n      window.setTimeout(() => { delayedSender(store, queue); }, MESSAGE_DELAY);\n    }\n  };\n  \n  window.setTimeout(() => { delayedSender(store, queued); }, MESSAGE_DELAY);\n}\n\ninterface ArenaProps {\n  arena: ArenaState;\n}\n\nfunction ArenaElement({ arena }: ArenaProps) {\n  const { t } = useTranslation();\n  const processes = arena.process.allNames.map((p) => <ProcessUI process={arena.process.byName[p]} arena={arena.name} key={p} />);\n  return (\n    <div>\n      <div className=\"row\">{ processes }</div>\n      <div className=\"card w-100 mt-4 mb-2\">\n        <div className=\"card-body\">\n          <h5 className=\"card-title\">{t('msg-log.title')}</h5>\n          {arena.log.length === 0 &&\n            <div className=\"d-flex align-items-center\">\n              <div className=\"spinner-grow spinner-grow-sm\" role=\"status\"></div>\n              <p className=\"card-text ml-1\">{t('msg-log.empty')}</p>\n            </div>\n          }\n          <MessageLog arena={arena.name} showSelf={false} maxRows={1000}/>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nfunction mapStateToProps(state: AppState, props: ArenaProps) {\n  return { log: selectArena(state, props.arena.name).log };\n}\n\nexport const Arena = connect(mapStateToProps)(ArenaElement);\n\n\n","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { ProcessState, Payload, message, Message } from '../process/Base';\n\ninterface SendProps<S, M extends Payload> {\n\tarena: string;\n\towner: ProcessState<S>;\n\ttarget?: string | string[];\n\tclassName?: string;\n\tmessage: (values?: any) => M;\n\ttext: string;\n\tmessageToAction: (props: SendProps<S, M>, values?: any) => Message<M>;\n\tonClick?: (ev?: any) => void;\n\ttitle?: string;\n}\n\nfunction fixTarget(owner: ProcessState<any>, target?: string | string[]): string[] {\n\tif (target !== undefined && typeof target === 'string') {\n\t\treturn [target];\n\t}\n\n\tif (target === undefined || target.length === 0) {\n\t\treturn [owner.name];\n\t}\n\n\treturn target;\n}\n\nfunction messageToAction<S, M extends Payload>(props: SendProps<S, M>, values: any) {\n\treturn message(props.arena, props.owner, fixTarget(props.owner, props.target), props.message(values)); \n}\n\nfunction parseOrRaw(s: any): any {\n\tif (typeof s === \"string\" && s.startsWith(\"{\")) {\n\t\treturn JSON.parse(s);\n\t}\n\n\treturn s;\n}\n\nfunction values(f: HTMLFormElement): any {\n\n\tif (f === undefined || f === null) {\n\t\treturn {};\n\t}\n\n\treturn Array.from(f.elements)\n\t\t\t.map((u, i) => f.elements[i] as any as { \n\t\t\t\tname: string;\n\t\t\t\tvalue: any;\n\t\t\t\ttype: string;\n\t\t\t\toptions?: HTMLOptionsCollection;\n\t\t\t\tchecked?: boolean;\n\t\t\t})\n\t\t\t.filter(e => (e.name !== undefined && e.name !== null && e.name !== \"\" && !e.name.startsWith(\"_\")))\n\t\t\t.map(e => {\n\t\t\t\tif (e.type === \"select-multiple\") {\n\t\t\t\t\tlet out: any[] = [];\n\t\t\t\t\tlet i: number;\n\t\t\t\t\tfor (i = 0; i < e.options!.length; i++) {\n\t\t\t\t\t\tif (e.options![i].selected) {\n\t\t\t\t\t\t\tout.push(parseOrRaw(e.options![i].value));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\treturn { [e.name]: out };\n\t\t\t\t}\n\n\t\t\t\tif (e.type === \"checkbox\") {\n\t\t\t\t\tlet values: (string | undefined)[] = e.value.split(\"|\", 2);\n\t\t\t\t\tif (values.length === 1) {\n\t\t\t\t\t\tvalues.push(undefined);\n\t\t\t\t\t}\n\t\t\t\t\treturn { [e.name]: parseOrRaw(values[e.checked ? 0 : 1]) }\n\t\t\t\t}\n\t\t\t\treturn { [e.name]: parseOrRaw(e.value) }\n\t\t\t})\n\t\t\t.reduce((o, c) => ({ ...o, ...c }), {});\n}\n\nclass Send<S, M extends Payload> extends React.Component<SendProps<S, M>> {\n\n\thandleClick(ev: any) {\n\t\tev.preventDefault();\n\t\tthis.props.messageToAction(this.props, values(ev.currentTarget.form));\n\t\tif(this.props.onClick) this.props.onClick(ev);\n\t};\n\n\trender() {\n\t\treturn <button \n\t\t\tclassName={ this.props.className === undefined ? \"btn btn-primary\" : this.props.className } \n\t\t\tonClick={(ev) => this.handleClick(ev)}\n\t\t\ttitle={this.props.title}\n\t\t>{this.props.text}</button>\n\t}\n}\n\nexport const SimpleSend = connect(null, { messageToAction })(Send);\n\n","import { ProcessImplName, ViewName, ProcessState, Payload, GenericMessageHandler, Message, addHandlerClass, ProcessAndArena, addRenderer } from './Base';\nimport * as React from 'react';\nimport { SimpleSend } from '../components/SendButton';\nimport { MessageLog } from '../components/MessageLog';\n\nconst Counter : ProcessImplName = \"Counter\";\n\nconst CounterDefaultView : ViewName = \"_\";\n\n// \"rakenduse olek\"\nexport interface CounterState extends ProcessState<number> {\n\ttype: typeof Counter;\n\tview: typeof CounterDefaultView;\n}\n\n// \"bootloader\", tekitab rakenduse algoleku\nexport function createCounter(name: string) {\n\treturn {\n\t\tname: name,\n\t\ttype: Counter,\n\t\tview: CounterDefaultView,\n\t\tmem: 0,\n\t} as CounterState;\n}\n\nclass IncrementMessageHandler extends GenericMessageHandler<number, CounterState, Payload, IncrementMessageHandler> {\n\tname = \"Counter/INC\";\n\tupdateMem(mem: number, action: Message<Payload>) { return mem + 1; }\n}\n\n\nclass DecrementMessageHandler extends GenericMessageHandler<number, CounterState, Payload, DecrementMessageHandler> {\n\tname = \"Counter/DEC\";\n\tupdateMem(mem: number, action: Message<Payload>) { return mem - 1; }\n}\n\nconst incrementMessage = addHandlerClass(Counter, IncrementMessageHandler);\nconst decrementMessage = addHandlerClass(Counter, DecrementMessageHandler);\n\n\ninterface DefaultViewProps extends ProcessAndArena<number> {\n\tprocess: CounterState;\n\tarena: string;\n}\n\nconst counterRenderer : React.FC<DefaultViewProps> = ({process, arena}) => {\n\treturn (\n\t<div>\n\t\t<span className=\"process-state\">{ process.mem }</span>\n\t\t<span className=\"process-state\">\n\t\t\t<SimpleSend arena={arena} owner={process} text=\"+\" message={incrementMessage()}/>\n\t\t\t<SimpleSend arena={arena} owner={process} text=\"-\" message={decrementMessage()}/>\n\t\t</span>\n\t\t<span className=\"process-state\">\n\t\t\t<MessageLog arena={arena} owner={process} showSelf={true} maxRows={4}/>\n\t\t</span>\n\t</div>\n\t);\n};\n\n\naddRenderer(Counter, CounterDefaultView, counterRenderer);\n","import * as React from 'react';\n\ninterface PopupProps {\n    text: any;\n    open?: boolean; // initial state\n}\n\nexport class Popup extends React.Component<PopupProps, { open: boolean }> {\n    state = { open: false };\n\n    render() {\n        return (\n            <div>\n                <div className={ this.state.open ? \"popup-visible\" : \"popup-hidden\" }>\n                    <div className=\"popup-content\">\n                        <div className=\"popup-close\" onClick={() => this.setState({open: false})}></div>\n                        {this.props.children}\n                    </div>\n                </div>\n                <button className=\"btn btn-primary\" onClick={() => this.setState({open: true})}>{this.props.text}</button>\n            </div>\n        );\n    }\n}","import * as React from \"react\";\n\ninterface Props {}\n\ninterface State {\n  view: string;\n  loading: boolean;\n}\n\nconst LOGIN = \"login\";\nconst SELECT_SERVICE = \"selectService\";\nconst SERVICE_V1 = \"serviceV1\";\n\nconst Header = () => (\n  <div className=\"app-header\">\n    <div className=\"app-user-icon\">\n      <img alt=\"user icon\" src={require('./../static/assets/images/user-icon.svg')} />\n    </div>\n    <p className=\"app-user\">TERE MARI-LIIS MÄNNIK</p>\n  </div>\n);\n\nclass ClientView extends React.PureComponent<Props, State> {\n\n  state = {\n    view: LOGIN,\n    loading: false\n  };\n\n  changeView = (view: string) => {\n    this.setState({ loading: true });\n    setTimeout(() => {\n      this.setState({loading: false});\n      this.setState({view: view});\n    }, 1000);\n  };\n\n  render() {\n    switch (this.state.loading) {\n      case true:\n      return (\n        <div className=\"d-flex align-items-center\">\n          <strong>Loading...</strong>\n          <div className=\"spinner-border ml-auto\" role=\"status\" aria-hidden=\"true\"></div>\n        </div>\n      );\n      default:\n        switch (this.state.view) {\n          case LOGIN:\n          return (\n            <div>\n              <h4>Tere! Teenuse kasutamiseks logi palun sisse.</h4>\n              <button className=\"btn btn-light border\" onClick={() => this.changeView(SELECT_SERVICE)}>Logi sisse kasutajana Mari-Liis Männik 47302200234</button>\n              <p className=\"mt-4\">\n                <img alt=\"illustration\" src={require('./../static/assets/images/login.svg')} width=\"280\" />\n              </p>\n            </div>\n          );\n          case SELECT_SERVICE:\n          return (\n            <div>\n              <Header />\n              <h4>Vali teenus mida soovid kasutada:</h4>\n              <button className=\"btn btn-dark\" onClick={() => this.changeView(SERVICE_V1)}>Vaktsineerimiste meeldetuletused</button>\n            </div>\n          );\n          case SERVICE_V1:\n          return (\n            <div>\n              <Header />\n              <h4>Teenuse tekst TODO</h4>\n              <p className=\"text-left\">\n                <small>Enne nõusoleku andmist veendu, et oled tutvunud meie privaatsuspoliitika ja kasutustingimustega, mis on leiavad <a href=\"JavaScript:void(0);\">siin</a>. Nõusoleku andmiseks suuname Sind e-Tervise nõusolekute keskkonda, mida haldab Tervise- ja Heaolu Infosüsteemide Keskus.</small>\n              </p>\n              <button className=\"btn btn-lg btn-primary\">Annan nõusoleku</button>\n            </div>\n          );\n          default:\n          return(null)\n        }\n    }\n  }\n}\n\nexport default ClientView;","import * as React from 'react';\nimport { ProcessAndArena, ProcessImplName, ViewName, ProcessState, GenericMessageHandler, Payload, Message, message, addHandlerClass, addRenderer, addUi } from './Base';\nimport { SimpleSend } from '../components/SendButton';\nimport { MessageLog } from '../components/MessageLog';\nimport { Popup } from '../components/Popup';\nimport { Modal, Button } from 'react-bootstrap';\nimport { useTranslation } from 'react-i18next';\nimport ClientView from './../components/Client';\n\nconst TokenNode : ProcessImplName = \"TokenNode\";\n\nconst WithToken : ViewName = \"with\";\nconst WithoutToken : ViewName = \"without\";\n\ninterface NodeState {\n  token?: string; // token I have or undefined\n  next: string; // next station.\n}\n\ninterface NodePS extends ProcessState<NodeState> {\n  type: typeof TokenNode;\n  view: typeof WithToken | typeof WithoutToken;\n  title: string;\n}\n\nexport function createTokenNode(title: string, name: string, next: string, token?: string): NodePS {\n  return {\n    title: title,\n    name: name,\n    type: TokenNode,\n    view: token === undefined ? WithoutToken : WithToken,\n    mem: {\n      token: token,\n      next: next\n    },\n    queue: [],\n  };\n}\n\nclass InitPassHandler extends GenericMessageHandler<NodeState, NodePS, Payload, InitPassHandler> {\n  name = \"TokenNode/InitPass\";\n  handle(node: NodePS, action: Message<Payload>) {\n    if (node.view !== WithToken) {\n      console.error(`Invalid message, order to pass while I have no token? ${JSON.stringify(node)}`);\n      return node;\n    }\n\n    \n    return {\n      ...node,\n      queue: node.queue.concat(message(action.arena, node, [node.mem.next], tokenMessage({token: node.mem.token})())),\n      mem: { ...node.mem, token: undefined },\n      view: WithoutToken,\n    };\n  }\n}\n\nconst initPassMessage = addHandlerClass(TokenNode, InitPassHandler);\n\n\n// selle sõnumiga saadetakse reaalselt tokeneid.\ninterface TokenMessage extends Payload {\n  token: string;\n}\n\nclass PostTokenHandler extends GenericMessageHandler<NodeState, NodePS, TokenMessage, PostTokenHandler> {\n  name = \"TokenNode/PostToken\";\n  // sissetulev token\n  handle(node: NodePS, action: Message<TokenMessage>) {\n    if (node.view === WithToken) {\n      console.log(`${action.sender} sent token '${action.message.token}' to ${node.name}. We already have a token (${node.mem.token}). Will send the token back`);\n      // send it back.\n      return {\n        ...node,\n        queue: node.queue.concat(message(action.arena, node, [action.sender], action.message)),\n      };\n    } else {\n      // tokenit polnud, jätame meelde.\n      return {\n        ...node,\n        mem: { ...node.mem, token: action.message.token },\n        view: WithToken,\n      };\n\n    }\n  }\n}\n\nconst tokenMessage = addHandlerClass<TokenMessage, PostTokenHandler>(TokenNode, PostTokenHandler);\n\n\ninterface TargetPayload extends Payload {\n  target: string;\n}\n\nclass UpdateTargetHandler extends GenericMessageHandler<NodeState, NodePS, Payload, InitPassHandler> {\n  name = \"TokenNode/UpdateTarget\";\n  updateMem(mem: NodeState, action: Message<TargetPayload>) {\n    return { ...mem, next: action.message.target };\n  }\n}\n\nconst updateNextMessage = addHandlerClass(TokenNode, UpdateTargetHandler);\n\n\n////\n\ninterface NodeViewProps extends ProcessAndArena<NodeState> {\n  process: NodePS,\n}\n\nconst SetTargetPopup : React.FC<NodeViewProps> = ({process, arena}) => {\n\n  const { t } = useTranslation();\n  const [show, setShow] = React.useState(false);\n  const handleClose = () => setShow(false);\n  const handleShow = () => setShow(true);\n\n  switch(process.name) {\n    case \"a\":\n    return (\n      <>\n      <Modal show={show} onHide={handleClose} size=\"lg\">\n        <Modal.Header closeButton>\n          <Modal.Title>Teenusedeklaratsiooni registreerimine</Modal.Title>\n        </Modal.Header>\n        <form>\n          <Modal.Body>\n              <div className=\"row\">\n                <div className=\"col\">\n                  <div className=\"form-group\">\n                    <label htmlFor=\"baseName\">Andmekogu nimi:</label>\n                    <input name=\"baseName\" type=\"text\" className=\"form-control\" id=\"baseName\" value=\"test\" readOnly />\n                  </div>\n                  <div className=\"form-group\">\n                    <label htmlFor=\"xtee\">Andmekogu X-tee:</label>\n                    <input name=\"xtee\" type=\"text\" className=\"form-control\" id=\"xtee\" value=\"123\" readOnly />\n                    <small id=\"xteeHelp\" className=\"form-text text-muted\">(alamsüsteemi) identifikaator.</small>\n                  </div>\n                  <div className=\"form-group\">\n                    <label htmlFor=\"sdName\">Teenusedeklaratsiooni nimi:</label>\n                    <input name=\"sdName\" type=\"text\" className=\"form-control\" id=\"sdName\" />\n                    <small id=\"sdNameHelp\" className=\"form-text text-muted\">Teenusedeklaratsiooni identifikaator inimloetaval kujul. Soovitatavalt teenuse kood/nimi ja vajadusel alamteenuse identifikaator.</small>\n                  </div>\n                </div>\n                <div className=\"col\">\n                  <div className=\"form-group\">\n                    <label htmlFor=\"sdIdentifier\">Teenusedeklaratsiooni identifikaator:</label>\n                    <input name=\"sdIdentifier\" type=\"text\" className=\"form-control\" id=\"sdIdentifier\" />\n                    <small id=\"sdIdentifierHelp\" className=\"form-text text-muted\">Andmekogu poolt määratud teenusedeklaratsiooni masinloetav identifikaator.</small>\n                  </div>\n                  <div className=\"form-group\">\n                    <label htmlFor=\"sdDescription\">Teenuse andmekoosseisu kirjeldus:</label>\n                    <input name=\"sdDescription\" type=\"text\" className=\"form-control\" id=\"sdDescription\" />\n                    <small id=\"sdDescriptionHelp\" className=\"form-text text-muted\">Teenuse poolt tagastatava andmekoosseisu inimloetav kirjeldus. Kuvatakse nõusoleku andmisel andmesubjektile.</small>\n                  </div>\n                  <div className=\"form-group\">\n                    <div className=\"form-check\">\n                      <input name=\"signature\" className=\"form-check-input\" type=\"checkbox\" id=\"signature\" />\n                      <label className=\"form-check-label\" htmlFor=\"signature\">Vajab digiallkirja?</label>\n                      <small id=\"signatureHelp\" className=\"form-text text-muted\">Märgista see väli, kui andmesubjekt peab selle teenuse andmetele nõusoleku andmisel nõusoleku digitaalselt allkirjastama.</small>\n                    </div>\n                  </div>\n                </div>\n              </div>\n          </Modal.Body>\n          <Modal.Footer>\n            <Button variant=\"secondary\" onClick={handleClose}>Close</Button>\n            <SimpleSend arena={arena} owner={process} onClick={() => handleClose()} text=\"Update\" message={updateNextMessage()}/>\n          </Modal.Footer>\n        </form>\n      </Modal>\n      <Button variant=\"primary\" onClick={handleShow}>\n        {t('register')}\n      </Button>\n      </>\n    )\n    case \"b\":\n    return (\n      <>\n      <Modal show={show} onHide={handleClose} size=\"lg\">\n        <Modal.Header closeButton>\n          <Modal.Title>Eesmärgideklaratsiooni registreerimine</Modal.Title>\n        </Modal.Header>\n        <form>\n          <Modal.Body>\n              <div className=\"row\">\n                <div className=\"col\">\n                  <div className=\"form-group\">\n                    <label htmlFor=\"applicationName\">Klientrakenduse nimi:</label>\n                    <input name=\"applicationName\" type=\"text\" className=\"form-control\" id=\"applicationName\" value=\"test\" readOnly />\n                  </div>\n                  <div className=\"form-group\">\n                    <label htmlFor=\"applicationXtee\">Klientrakenduse X-tee:</label>\n                    <input name=\"applicationXtee\" type=\"text\" className=\"form-control\" id=\"applicationXtee\" value=\"123\" readOnly />\n                    <small id=\"applicationXteeHelp\" className=\"form-text text-muted\">(alamsüsteemi) identifikaator.</small>\n                  </div>\n                  <div className=\"form-group\">\n                    <label htmlFor=\"dIdentifier\">Deklaratsiooni identifikaator:</label>\n                    <input name=\"dIdentifier\" type=\"text\" className=\"form-control\" id=\"dIdentifier\" />\n                    <small id=\"dIdentifierHelp\" className=\"form-text text-muted\">Klientrakenduse poolt määratud eesmärgideklaratsiooni identifikaator</small>\n                  </div>\n                </div>\n                <div className=\"col\">\n                  <div className=\"form-group\">\n                    <label htmlFor=\"dataUsage\">Andmete kasutamise eesmärk:</label>\n                    <input name=\"dataUsage\" type=\"text\" className=\"form-control\" id=\"dataUsage\" />\n                    <small id=\"dataUsageHelp\" className=\"form-text text-muted\">Andmesubjekti andmete töötlemise eesmärk. Kuvatakse nõusoleku andmisel andmesubjektile.</small>\n                  </div>\n                  <div className=\"form-group\">\n                    <label htmlFor=\"services\">Kasutatavad teenused:</label>\n                    <select name=\"services\" className=\"custom-select\" multiple defaultValue={['1']} id=\"services\">\n                      <option value=\"1\">One</option>\n                      <option value=\"2\">Two</option>\n                      <option value=\"3\">Three</option>\n                    </select>\n                  </div>\n                </div>\n              </div>\n          </Modal.Body>\n          <Modal.Footer>\n            <Button variant=\"secondary\" onClick={handleClose}>Close</Button>\n            <SimpleSend arena={arena} owner={process} onClick={() => handleClose()} text=\"Update\" message={updateNextMessage()}/>\n          </Modal.Footer>\n        </form>\n      </Modal>\n      <Button variant=\"primary\" onClick={handleShow}>\n        {t('register')}\n      </Button>\n      </>\n    )\n    case \"c\":\n    return (\n      <>\n      <Modal show={show} onHide={handleClose} size=\"lg\" bsPrefix=\"client-app modal\">\n        <Modal.Header>\n          <Modal.Title>HealthStartup</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <ClientView />\n        </Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"outline-dark\" onClick={handleClose}>Close</Button>\n        </Modal.Footer>\n      </Modal>\n      <Button variant=\"primary\" onClick={handleShow}>\n        {t('continue')}\n      </Button>\n      </>\n    )\n    default:\n    return (\n      <Popup text=\"Set target\">\n        <form>\n          <input name=\"target\" size={20}/>\n          <SimpleSend arena={arena} owner={process} text=\"Update target\" message={updateNextMessage()}/>\n        </form>\n      </Popup>\n    )\n  }\n};\n\nconst tokenlessRenderer : React.FC<NodeViewProps> = ({process, arena}) => {\n  return (\n    <div>\n      {/*\n      <span className=\"process-state\">next: {process.mem.next}</span>\n      */}\n      <SetTargetPopup arena={arena} process={process}/>\n      <span className=\"process-state\">\n        <MessageLog arena={arena} owner={process} showSelf={true} maxRows={2}/>\n      </span>\n    </div>\n  )\n};\n\nconst tokenfulRenderer : React.FC<NodeViewProps> = ({process, arena}) => {\n  return (<div>\n    <span className=\"process-state\">{process.mem.token}</span>\n    <span className=\"process-state\">next: {process.mem.next}</span>\n    <span className=\"process-state d-none\"><SimpleSend arena={arena} owner={process} text=\"Pass the token\" message={initPassMessage()}/></span>\n    <SetTargetPopup arena={arena} process={process}/>\n    <span className=\"process-state\">\n      <MessageLog arena={arena} owner={process} showSelf={true} maxRows={4}/>\n    </span>\n  </div>);\n}\n\naddRenderer(TokenNode, WithToken, tokenfulRenderer);\naddRenderer(TokenNode, WithoutToken, tokenlessRenderer);\n\naddUi(TokenNode, \"/ui/dummy\");","import { ProcessImplName, ViewName, ProcessState } from \"../Base\";\nimport { PurposeDeclaration } from \"../consentService/types\";\n\n\nexport const ClientIS : ProcessImplName = \"ClientIS\";\nexport const ClientDefaultView : ViewName = \"loginView\";\n\nexport type PurposeDeclarationTemplate = Partial<PurposeDeclaration> & { purposeDeclarationId: string; }\n\n// the Client \"implements\" requests as defined in config\nexport interface ClientConfig {\n    // purpose declaration\n    purposeDeclarationId: string;\n    services: { // services it needs\n        serviceAddress: string;\n        serviceName: string;\n    }[];\n}\nexport interface ClientState {\n    ui: {\n        user?: string; // authenticated data subject id or null\n        service?: string;\n        response?: {\n            // used to match async messag\n            requestReferenceId: string;\n            purposeDeclarationId: string;\n            serviceAddress: string;\n            serviceName: string;\n            data: any;\n        }[];\n    };\n\n    db: {\n        consentServiceId: string; // should be per purpose\n        consentRefByUser: { [key: string]: { [key: string]: string | null; } }; // userid -> purposedeclarationid -> consentref\n        purpose: { // purposedeclarationid -> servicedesc[]\n            [key: string]: { \n                serviceAddress: string; // the actual communication address\n                serviceId: string;      // actual \"service\"\n            }[];\n         } \n    };\n\n    declTemplate?: PurposeDeclarationTemplate[];\n\n    config: ClientConfig[];\n}\n\nexport interface ClientPS extends ProcessState<ClientState> {\n    type: typeof ClientIS;\n    view: typeof ClientDefaultView;\n}\n","import { ViewName, ProcessImplName, ProcessState } from '../Base';\n\nexport const ConsentService : ProcessImplName = \"ConsentService\";\nexport const ConsentServiceDefaultView : ViewName = \"loginView\";\n\n\nexport interface ConsentServicePS extends ProcessState<ConsentServiceState> {\n    type: typeof ConsentService;\n    view: typeof ConsentServiceDefaultView;\n}\n\nexport interface ServiceDeclaration {\n    serviceProviderId: string;\n    serviceDeclarationId: string;\n    name: string;\n    description: string;\n    technicalDescription: string;\n    consentMaxDurationSeconds: number; // integer\n    needSignature: boolean;\n    validUntil?: number; // timestamp as seconds from unix epoch?\n    maxCacheSeconds?: number;\n}\n\nexport interface ServiceDeclarationRef {\n    serviceProviderId: string;\n    serviceDeclarationId: string;\n}\n\nexport interface PurposeDeclaration {\n    clientId: string;\n    purposeDeclarationId: string;\n    name: string;\n    description: string;\n    services: ServiceDeclarationRef[];\n    validUntil?: number; // seconds from unix epoch\n    options: any;\n}\n\nexport interface Consent {\n    dataSubject: string;\n    clientId: string;\n    purposeDeclarationId: string;\n    validFrom: number;\n    validUntil: number;\n    revoked: boolean;\n    consentReference: string; // used only in protocol\n}\n\nexport interface UsageRecord {\n    usageTime: number; // seconds from unix epoch\n    serviceProviderId: string;\n    requestReference: string;\n    consentReference?: string;\n    subjectId: string;\n    clientId: string;\n    serviceDeclarationIds: string[];\n    result: \"OK\" | \"ACCESS_DENIED\" | \"OTHER_FAIL\";\n}\n\nexport interface PurposeDeclarationRef {\n    clientId: string;\n    purposeDeclarationId: string;\n}\n\nexport interface ActivePurposeDeclarationRef extends PurposeDeclarationRef {\n    callbackURL?: string;\n}\n\nexport interface ConsentServiceState {\n    ui: {\n        user?: string;\n        activePurposeDeclaration: {\n            [userid: string]: ActivePurposeDeclarationRef;\n        };\n    }\n\n    db: {\n        serviceDeclarations: ServiceDeclaration[];\n        purposeDeclarations: PurposeDeclaration[];\n        consents: Consent[];\n        usageLog: UsageRecord[];\n    }\n}\n\nexport function findFrom<T extends U, U extends any>(items: T[], example: U): T | undefined {\n    return items.find(\n        i => { \n            return Object.keys(example).filter(\n                k => (i as T)[k] !== (example as U)[k]\n            ).length === 0\n        }\n    );\n}\n\n\n","import { createHash } from \"crypto\";\nimport React from \"react\";\n\n\nexport function hash(input: string): string {\n    return createHash(\"sha256\").update(input).digest(\"hex\").substring(0, 6);\n}\n\n// converts transport address to organization id\nexport function address2org(address: string): string {\n    let m = address.match(\"^([^/]+/[^/]+/[^/]+)(/.*)?$\");\n    if (m === null) {\n        // not an X-Road member id or more specific address?\n        return address;\n    }\n    \n    return m[1];\n}\n\nexport function renderText(t: string) {\n    type OutElement = { text: string; indent: number; children: OutElement[] };\n    let stack: OutElement[] = [];\n\n    function last(a: OutElement[]): OutElement {\n        return a[a.length - 1];\n    }\n\n    stack.push({ text: \"\", indent: -1, children: [] });\n\n    t.split(\"\\n\").forEach(l => {\n        let pref = l.match(\"^((  )+\\\\* )(.*)$\");\n        if (pref === null) {\n            pref = [\"\", \"\", \"\", l];\n        }\n\n        let prefix = pref[1];\n        let text = pref[3];\n\n        while (prefix.length <= last(stack).indent) {\n            // the same level -> back up, so it will be actually a new level?\n            stack.pop();\n        }\n\n        if (prefix.length > last(stack).indent) {\n            // new level\n            last(stack).children.push({ text: text, indent: prefix.length, children: [] })\n            stack.push(last(last(stack).children));\n        }\n    });\n\n    function ul(children: OutElement[]) {\n        if (children.length === 0) {\n            return <></>;\n        }\n\n        return (\n            <ul className=\"desc-markup\">{ \n                children.map(c => <li className=\"desc-markup\">{ c.text }{ ul(c.children) }</li>)\n            }</ul>\n        );\n    }\n\n    return stack[0].children.map(c => <><p className=\"desc-markup\">{ c.text }</p>{ ul(c.children) }</>);\n}","import { ServiceDeclaration, ConsentServiceState, findFrom, PurposeDeclaration, ConsentService, ConsentServicePS } from './types'\nimport { GenericMessageHandler, Message, addHandlerClass, updateDb } from '../Base';\nimport { address2org } from '../../util';\n\n// {Service,Purpose}Declaration API messages and their processing\n\ninterface ServiceDeclarationMessage extends ServiceDeclaration {\n    type: typeof AddServiceDeclarationMessage.name;\n}\n\nclass AddServiceDeclarationMessage extends GenericMessageHandler<ConsentServiceState, ConsentServicePS, ServiceDeclarationMessage, AddServiceDeclarationMessage> {\n    name = \"CS/addServiceDeclaration\"; \n\n    addServiceDeclaration(cs: ConsentServicePS, sd: ServiceDeclaration): ConsentServicePS {\n        return updateDb(cs, { serviceDeclarations: cs.mem.db.serviceDeclarations.concat(sd) });\n    }\n\n    handle(cs: ConsentServicePS, msg: Message<ServiceDeclarationMessage>) {\n        console.log(`addServiceDeclaration: ${JSON.stringify(msg)}`);\n\n        let decl = msg.message;\n\n        if (findFrom(\n            cs.mem.db.serviceDeclarations,\n            { serviceProviderId: decl.serviceProviderId, serviceDeclarationId: decl.serviceDeclarationId }) !== undefined) {\n\n            return this.withErrorResponse(cs, msg, \"duplicate_declaration\");\n        }\n\n        if (decl.serviceProviderId !== address2org(msg.sender)) {\n            return this.withErrorResponse(cs, msg, \"invalid_request\", {\n                 msg: \"serviceProvcderId in declaration and message do not match\"\n            });\n        }\n\n        if (decl.serviceDeclarationId === undefined || !decl.serviceDeclarationId.match(\"^[!-~]+$\")) {\n            return this.withErrorResponse(cs, msg, \"invalid_request\", { msg: \"Invalid service declaration id\"});\n        }\n\n        return this.withOkResponse(this.addServiceDeclaration(cs, { ...msg.message, type: undefined } as ServiceDeclaration), msg);\n    }\n}\n\nexport const addServiceDeclaration = addHandlerClass(ConsentService, AddServiceDeclarationMessage);\n\ninterface PurposeDeclarationMessage extends PurposeDeclaration {\n    type: typeof AddPurposeDeclarationMessage.name;\n}\n\nclass AddPurposeDeclarationMessage extends GenericMessageHandler<ConsentServiceState, ConsentServicePS, PurposeDeclarationMessage, AddPurposeDeclarationMessage> {\n    name = \"CS/addPurposeDeclaration\"; \n\n    addPurposeDeclaration(cs: ConsentServicePS, pd: PurposeDeclaration): ConsentServicePS {\n        return updateDb(cs, { purposeDeclarations: cs.mem.db.purposeDeclarations.concat(pd) });\n    }\n\n    handle(cs: ConsentServicePS, msg: Message<PurposeDeclarationMessage>) {\n        console.log(`addPurposeDeclaration: ${JSON.stringify(msg)}`);\n\n        let decl = msg.message;\n\n        if (findFrom(\n            cs.mem.db.purposeDeclarations,\n            { clientId: decl.clientId, purposeDeclarationId: decl.purposeDeclarationId }) !== undefined) {\n\n            return this.withErrorResponse(cs, msg, \"duplicate_declaration\");\n        }\n\n        if (decl.clientId !== address2org(msg.sender)) {\n            return this.withErrorResponse(cs, msg, \"invalid_request\", { msg: \"clientId in declaration and message do not match\"});\n        }\n\n        if (decl.purposeDeclarationId === undefined || !decl.purposeDeclarationId.match(\"^[!-~]+$\")) {\n            return this.withErrorResponse(cs, msg, \"invalid_request\", { msg: \"Invalid purpose declaration id\"});\n        }\n\n        if (decl.services.length === 0 || decl.services.find(sdRef => {\n            // true if sdRerf does not match with any of existing servicedeclarations\n            return findFrom(cs.mem.db.serviceDeclarations, sdRef) === undefined;\n        }) !== undefined) {\n\n            return this.withErrorResponse(cs, msg, \"invalid_request\", { msg: \"Invalid or missing SD reference(s)\"});\n        }\n\n        return this.withOkResponse(this.addPurposeDeclaration(cs, { ...msg.message, type: undefined } as PurposeDeclaration), msg);\n    }\n}\n\nexport const addPurposeDeclaration = addHandlerClass(ConsentService, AddPurposeDeclarationMessage);\n","import { Payload, GenericMessageHandler, Message, addHandlerClass, message, updateDb } from '../Base';\nimport { ConsentServiceState, ConsentServicePS, ConsentService, findFrom, Consent, PurposeDeclarationRef, ActivePurposeDeclarationRef } from './types';\nimport { fetchConsentReference } from '../client/messages';\n\n// messages that the ConsentService UI can send \n\nexport interface LoginMessage extends Payload {\n    type: typeof LoginMessageHandler.name;\n    user?: string;\n}\n\nclass LoginMessageHandler extends GenericMessageHandler<ConsentServiceState, ConsentServicePS, LoginMessage, LoginMessageHandler> {\n    name = \"CS/UI/login\";\n\n    handle(cs: ConsentServicePS, action: Message<LoginMessage>): ConsentServicePS {\n        console.log(\"login message: \", action); \n        return { ...cs, mem: { ...cs.mem, ui: { ...cs.mem.ui, user: action.message.user } } };\n    }\n}\n\nexport const loginMessage = addHandlerClass<LoginMessage, LoginMessageHandler>(ConsentService, LoginMessageHandler);\n\ninterface ConsentMessage extends Consent, Payload {\n    type: typeof GiveConsentMessageHandler.name;\n}\n\nclass GiveConsentMessageHandler extends GenericMessageHandler<ConsentServiceState, ConsentServicePS, ConsentMessage, GiveConsentMessageHandler> {\n    name: string = \"CS/UI/giveConsent\";\n\n    addConsent(cs: ConsentServicePS, con: Consent): ConsentServicePS {\n        return updateDb<typeof cs.mem.db, ConsentServiceState>(cs, { consents: cs.mem.db.consents.concat(con) });\n    }\n\n    handle(cs: ConsentServicePS, msg: Message<ConsentMessage>): ConsentServicePS {\n        let newConsent = msg.message;\n        if (findFrom(cs.mem.db.purposeDeclarations, { \n            clientId: newConsent.clientId,\n             purposeDeclarationId: newConsent.purposeDeclarationId\n        }) === undefined) {\n            console.error(\"Attempt to add consent for unknown purpose declaration: \", newConsent);\n            return cs;\n        }\n\n        if (findFrom(cs.mem.db.consents, {\n            clientId: msg.message.clientId,\n            purposeDeclarationId: msg.message.purposeDeclarationId,\n            dataSubject: msg.message.dataSubject,\n            revoked: false\n        }) !== undefined) {\n            console.error(\"Attempt to add duplicate consent?\");\n            return cs;\n        }\n\n        console.log(\"Adding consent: \", msg.message);\n\n        let updatedCS = this.addConsent(cs, { ...msg.message, type: undefined } as Consent);\n\n        let activeUser = cs.mem.ui.user;\n        if (activeUser === undefined || cs.mem.ui.activePurposeDeclaration[activeUser] === undefined) {\n            // no user, no active pd --> no callback\n            return updatedCS;\n        }\n\n        let decl = cs.mem.ui.activePurposeDeclaration[activeUser];\n\n        // forget that we had pd selected.\n        let updatedCS2 = setActivePD(updatedCS, activeUser, undefined);\n\n        if (decl.clientId !== msg.message.clientId || decl.purposeDeclarationId !== msg.message.purposeDeclarationId \n                || decl.callbackURL === undefined) {\n            return updatedCS2;\n        }\n\n        // if the client application asked for callback, we send it a message about the \n        // consent being signed. reusing UI message from client implementation.\n        return this.send(updatedCS2, message(msg.arena, updatedCS, [decl.callbackURL],\n            fetchConsentReference({ purposeDeclarationId: decl.purposeDeclarationId })()\n        ));\n\n    }\n}\n\nexport const giveConsentMessage = addHandlerClass<ConsentMessage, GiveConsentMessageHandler>(ConsentService, GiveConsentMessageHandler);\n\n\ninterface RevokeConsentMessage extends Payload {\n    type: typeof RevokeConsentMessageHandler.name;\n    consentReference: string;\n    revokeAt: number;\n}\n\nclass RevokeConsentMessageHandler extends GenericMessageHandler<ConsentServiceState, ConsentServicePS, RevokeConsentMessage, RevokeConsentMessageHandler> {\n    name: string = \"CS/UI/revokeConsent\";\n\n    revokeIfReferenceEquals(con: Consent, ref: RevokeConsentMessage) : Consent {\n        if (con.consentReference === ref.consentReference) {\n            return { ...con, revoked: true, validUntil: ref.revokeAt};\n        } \n\n        return con;\n    }\n\n    revokeConsent(cs: ConsentServicePS, ref: RevokeConsentMessage): ConsentServicePS {\n        return updateDb(cs, { consents: cs.mem.db.consents.map(a => this.revokeIfReferenceEquals(a, ref))});\n    }\n    \n    handle(cs: ConsentServicePS, msg: Message<RevokeConsentMessage>): ConsentServicePS {\n        return this.revokeConsent(cs, msg.message);\n    }\n}\n\nexport const revokeConsentMessage = addHandlerClass<RevokeConsentMessage, RevokeConsentMessageHandler>(ConsentService, RevokeConsentMessageHandler);\n\nfunction updateAPDforUser<R extends { [ user: string]: ActivePurposeDeclarationRef }>(refs: R, user: string, ref?: ActivePurposeDeclarationRef): R {\n    return { ...refs, [user]: ref };\n}\n\nexport function setActivePD(cs: ConsentServicePS, user: string, ref?: ActivePurposeDeclarationRef): ConsentServicePS {\n    return { ...cs, mem: { ...cs.mem, ui: { \n        ...cs.mem.ui,\n         activePurposeDeclaration: updateAPDforUser(cs.mem.ui.activePurposeDeclaration, user, ref)\n    }}}\n}\n\ninterface ActivatePurposeDeclaration extends Payload, PurposeDeclarationRef {\n    type: typeof ActivatePurposeDeclarationHandler.name;\n    user?: string;\n}\n\nclass ActivatePurposeDeclarationHandler extends GenericMessageHandler<ConsentServiceState, ConsentServicePS, ActivatePurposeDeclaration, ActivatePurposeDeclarationHandler> {\n    name = \"CS/UI/activatePurposeDeclaration\";\n\n    handle(cs: ConsentServicePS, action: Message<ActivatePurposeDeclaration>): ConsentServicePS {\n        return setActivePD(\n            cs,\n            action.message.user === undefined ? cs.mem.ui.user! : action.message.user,\n            {\n                clientId: action.message.clientId,\n                purposeDeclarationId: action.message.purposeDeclarationId,\n            }\n        );\n    }\n}\n\nexport const activatePurposeDeclarationMessage = addHandlerClass<ActivatePurposeDeclaration, ActivatePurposeDeclarationHandler>(ConsentService, ActivatePurposeDeclarationHandler);\n","import { GenericMessageHandler, Message, Payload, addHandlerClass, updateDb } from \"../Base\";\nimport { ConsentServiceState, ConsentServicePS, findFrom, ConsentService, Consent } from \"./types\";\nimport { setActivePD } from \"./ui\";\n\ninterface ConsentReferenceRequest extends Payload {\n    type: typeof GetConsentReferenceMessage.name;\n    clientId: string;\n    purposeDeclarationId: string;\n    subjectId: string;\n    callbackURL?: string;\n    code?: string;\n}\n\nexport const  ConsentReferenceResponseTypeName = \"CS/getConsentReference/response\";\nexport interface ConsentReferenceResponse extends Payload {\n    type: typeof ConsentReferenceResponseTypeName;\n    clientId: string; \n    purposeDeclarationId: string;\n    consentReference: string;\n}\n\nexport function fixRevoked(now: number): ((c: Consent) => Consent) {\n    return (c => ((!c.revoked && c.validUntil < now) ? { ...c, revoked: true } : c));\n}\n\nclass GetConsentReferenceMessage extends GenericMessageHandler<ConsentServiceState, ConsentServicePS, ConsentReferenceRequest, GetConsentReferenceMessage> {\n    name: string = \"CS/getConsentReference\";\n\n    handle (cs: ConsentServicePS, msg: Message<ConsentReferenceRequest>): ConsentServicePS {\n\n        let req = msg.message;\n\n        // mark expired consents as revoked, as optimization\n        let _cs : ConsentServicePS = updateDb<typeof cs.mem.db, ConsentServiceState>(\n            cs, { consents: cs.mem.db.consents.map(fixRevoked(msg.now!)) }\n        );\n\n        const consent = findFrom(\n            _cs.mem.db.consents,\n            {\n                purposeDeclarationId: req.purposeDeclarationId,\n                dataSubject: req.subjectId,\n                revoked: false,\n            }\n        );\n\n        if (consent === undefined) {\n            return this.withErrorResponse(\n                setActivePD(_cs, req.subjectId, {\n                    clientId: req.clientId,\n                    purposeDeclarationId: req.purposeDeclarationId,\n                    callbackURL: req.callbackURL\n                }),\n                msg,\n                \"consent_not_found\"\n            );\n        }\n\n        return this.withResponse<ConsentReferenceResponse>(\n            _cs,\n            msg,\n            {\n                type: ConsentReferenceResponseTypeName,\n                clientId: msg.message.clientId,\n                purposeDeclarationId: msg.message.purposeDeclarationId,\n                consentReference: consent.consentReference\n            })\n    }\n}\n\nexport const getConsentReference = addHandlerClass<ConsentReferenceRequest, GetConsentReferenceMessage>(ConsentService, GetConsentReferenceMessage);\n\n","import { ProcessImplName, ViewName, ProcessState, Payload } from \"../Base\";\nimport { ServiceDeclaration } from \"../consentService/types\";\n\n\nexport const ServiceProviderIS : ProcessImplName = \"ServiceProviderIS\";\nexport const ServiceProviderDefaultView : ViewName = \"defaultView\";\n\nexport interface ServiceProviderPS extends ProcessState<ServiceProviderState> {\n    type: typeof ServiceProviderIS;\n    view: typeof ServiceProviderDefaultView;\n}\n\n\nexport interface SecretRecord {\n    key: string;\n    type: string;\n    subject: string;\n    data: any;\n} \n\nexport interface ServiceConfig {\n    consentService: string;\n    serviceName: string;\n    requiredServiceDeclarationIds: string[];\n    returnedDatatypes: string[];\n}\n\nexport const requestTypeName = \"SP/request\";\n\nexport interface ServiceRequest extends Payload {\n    type: typeof requestTypeName;\n    clientId: string;\n    serviceName: string;\n    subjectId: string;\n    consentReference?: string;\n    requestReference: string;\n}\n\nexport const responseTypeName = \"SP/request/response\";\n\nexport interface ServiceResponse extends Payload {\n    asyncId: string; // response correlation id\n    records : SecretRecord[];\n}\n\nexport interface RequestState extends ServiceRequest {\n    validationRequestId: string; // internal, to match response\n    validationResponse?: any;\n    clientAddress: string;\n}\n\nexport type ServiceDeclarationTemplate = Partial<ServiceDeclaration> & { serviceDeclarationId: string };\n\nexport interface ServiceProviderState { \n    db: SecretRecord[];\n    services: ServiceConfig[];\n    inflight: RequestState[]; // requests received but not properly responded\n    declTemplate?: ServiceDeclarationTemplate[];\n}\n","import { GenericMessageHandler, Payload, Message, addHandlerClass } from \"../Base\";\nimport { ConsentServicePS, ConsentServiceState, ConsentService } from \"./types\";\nimport { address2org } from \"../../util\";\n\n\nexport interface ValidationRequest extends Payload {\n    type: typeof ValidationRequestHandler.name;\n    asyncId: string; // internal identifier to help SP to match answer to a request\n    partyId: string;\n    consentReference: string;\n    requestReference: string;\n}\n\nexport const ValidationResponseTypeName = \"CS/validateConsentReference/response\";\nexport interface ValidationResponse extends Payload {\n    type: typeof ValidationResponseTypeName;\n    asyncId: string; // internal identifier. same as in the request\n    valid: boolean;\n    consentReference?: string;\n    consentExpiration?: string; // timestamp\n    validationExpiration?: string;\n    dataSubjectId?: string;\n    clientId?: string;\n    purposeDeclarationId?: string;\n    serviceDeclarationId?: string[];\n}\n\nconst NotValidResponse : ValidationResponse = {\n    type: ValidationResponseTypeName,\n    asyncId: \"\",\n    valid: false,\n}\n\nclass ValidationRequestHandler extends GenericMessageHandler<ConsentServiceState, ConsentServicePS, ValidationRequest, ValidationRequestHandler> {\n    name = \"CS/validateConsentReference\";\n\n    notValid(cs: ConsentServicePS, action: Message<ValidationRequest>): ConsentServicePS {\n        return this.withResponse<ValidationResponse>(cs, action, { ...NotValidResponse, asyncId: action.message.asyncId });\n    }\n\n    handle(cs: ConsentServicePS, action: Message<ValidationRequest>): ConsentServicePS {\n        let consent = cs.mem.db.consents.find(c => c.consentReference === action.message.consentReference);\n\n        if (consent === undefined) {\n            console.log(\"No such consent found: \", action.message.consentReference);\n            return this.notValid(cs, action);\n        }\n\n        let now = action.now!;\n\n        if (consent.revoked || now < consent.validFrom || now > consent.validUntil) {\n            console.log(`Consent ${consent} is not valid`);\n            return this.notValid(cs, action);\n        }\n\n        let sender = address2org(action.sender);\n\n        // find services that the sender of the request is allowed to provide under the consent in question\n        let purposeDeclaration = cs.mem.db.purposeDeclarations.find(\n            pd => (pd.clientId === consent!.clientId && pd.purposeDeclarationId === consent!.purposeDeclarationId)\n        );\n\n        if (purposeDeclaration === undefined) {\n            console.error(\"Cannot find purposeDeclaration that matches to an existing consent?\");\n            return this.notValid(cs, action);\n        }\n\n        // services that the asking party is allowed to provide with this consent\n        let services = (purposeDeclaration.services\n            .filter(s => s.serviceProviderId === sender)\n            .map(s => s.serviceDeclarationId)\n        );\n\n        if (sender === consent.clientId) {\n            let response: ValidationResponse = {\n                type: ValidationResponseTypeName,\n                asyncId: action.message.asyncId,\n                valid: true,\n                consentReference: action.message.consentReference,\n                consentExpiration: new Date(consent.validUntil * 1000).toISOString(),\n                dataSubjectId: consent.dataSubject,\n                clientId: consent.clientId,\n                purposeDeclarationId: consent.purposeDeclarationId,\n                // this is not empty if the client and service provider are the same\n                // (data repurposing using the consent)\n                serviceDeclarationId: services,\n            }\n            return this.withResponse(cs, action, response);\n        }\n\n        // it was not the party that declared the purpose. if it is party whose service declaration was\n        // referenced from the purpose declaration, then it still might get the answer\n        if (services.length > 0) {\n            let response: ValidationResponse = {\n                type: ValidationResponseTypeName,\n                asyncId: action.message.asyncId,\n                valid: true,\n                consentReference: action.message.consentReference,\n                consentExpiration: new Date(consent.validUntil * 1000).toISOString(),\n                dataSubjectId: consent.dataSubject,\n                clientId: consent.clientId,\n                serviceDeclarationId: services,\n            }\n            return this.withResponse(cs, action, response);\n        }\n\n        // not the client, not the service provider => not authorized to get anything.\n        return this.notValid(cs, action);\n    }\n}\n\nexport const validateConsentReference = addHandlerClass<ValidationRequest, ValidationRequestHandler>(ConsentService, ValidationRequestHandler);\n\n","import { UsageRecord, ConsentServiceState, ConsentServicePS, ConsentService } from \"./types\";\nimport { GenericMessageHandler, Message, addHandlerClass, Payload, updateDb } from \"../Base\";\n\ninterface ServiceUseMessage extends UsageRecord, Payload {\n    type: typeof ReportServiceUseMessage.name;\n}\n\nclass ReportServiceUseMessage extends GenericMessageHandler<ConsentServiceState, ConsentServicePS, ServiceUseMessage, ReportServiceUseMessage> {\n    name: string = \"CS/reportServiceUsage\";\n\n    addUsageRecord(cs: ConsentServicePS, sd: UsageRecord) {\n        return updateDb(cs, { usageLog : cs.mem.db.usageLog.concat(sd)});\n    }\n\n    handle (cs: ConsentServicePS, msg: Message<ServiceUseMessage>) {\n        return this.withOkResponse(this.addUsageRecord(cs, {...msg.message, type: undefined } as UsageRecord), msg);\n    }\n}\n\nexport const reportServiceUse = addHandlerClass<ServiceUseMessage, ReportServiceUseMessage>(ConsentService, ReportServiceUseMessage);\n\n","import { GenericMessageHandler, Payload, Message, message, addHandlerClass, ErrorPayload } from \"../Base\";\nimport { ServiceProviderState, ServiceProviderPS, ServiceProviderIS, SecretRecord, ServiceRequest, requestTypeName, RequestState, ServiceConfig } from \"./types\";\nimport { addServiceDeclaration } from \"../consentService/declarationAPI\";\nimport { validateConsentReference, ValidationResponse, ValidationResponseTypeName } from \"../consentService/validationAPI\";\nimport { reportServiceUse } from \"../consentService/reportingAPI\";\nimport { submitResponse } from \"../client/messages\";\nimport { hash, address2org } from \"../../util\";\nimport { UsageRecord } from \"../consentService/types\";\n\ninterface DataPayload extends Payload {\n    type: typeof DataEntryHandler.name;\n    key: string;\n    datatype?: string;\n    subject?: string;\n    data?: any;\n}\n\nclass DataEntryHandler extends GenericMessageHandler<ServiceProviderState, ServiceProviderPS, DataPayload, DataEntryHandler> {\n    name = \"ServiceProvider/UI/addData\";\n\n    handle (spis: ServiceProviderPS, action: Message<DataPayload>): ServiceProviderPS {\n        if (action.message.datatype === undefined || action.message.datatype === \"\") {\n            return { ...spis, mem: { ...spis.mem, db: spis.mem.db.filter(r => (r.key !== action.message.key)) } };\n        }\n\n        let rec = action.message;\n        let dbrec : SecretRecord = { key: rec.key, type: rec.datatype!, subject: rec.subject!, data: rec.data! };\n\n        return { ...spis, mem: { ...spis.mem, db: spis.mem.db.concat(dbrec) } }\n    }\n}\n\nexport const addData = addHandlerClass<DataPayload, DataEntryHandler>(ServiceProviderIS, DataEntryHandler);\n\nclass SendDeclarationHandler extends GenericMessageHandler<ServiceProviderState, ServiceProviderPS, Payload, SendDeclarationHandler> {\n    name = \"ServiceProvider/UI/declareService\";\n\n    handle(spis: ServiceProviderPS, action: Message<Payload>): ServiceProviderPS {\n        // FIXME: korrektne CS väärtus\n        return this.send(spis, message(action.arena, spis, [ spis.mem.services[0].consentService ], addServiceDeclaration()(action.message)))\n    }\n}\n\nexport const declareService = addHandlerClass(ServiceProviderIS, SendDeclarationHandler);\n\nfunction requestId(req: ServiceRequest, service: ServiceConfig): string {\n    let input = req.clientId + req.consentReference + req.requestReference + \n             req.serviceName + req.subjectId + service.consentService;\n    \n    return hash(input);\n}\n\nclass ProtectedRequestHandler extends GenericMessageHandler<ServiceProviderState, ServiceProviderPS, ServiceRequest, ProtectedRequestHandler> {\n    name = requestTypeName;\n    handle(spis: ServiceProviderPS, action: Message<ServiceRequest>): ServiceProviderPS {\n\n        function _send<P extends Payload>(receivers: string[], m: P): Message<P> {\n            return message(action.arena, spis, receivers, m);     \n        }\n\n        let req : ServiceRequest = action.message;\n        // validate request (find service record from config)\n        let service = spis.mem.services.find(s => s.serviceName === req.serviceName);\n        if (service === undefined) {\n            // no reporting -- \"the request did not reach the relevant endpoint\"\n            return this.withErrorResponse(spis, action, \"invalid_request\");\n        }\n\n        if (req.clientId !== address2org(action.sender)) {\n            // FIXME: here we COULD report something?\n            return this.withErrorResponse(spis, action, \"invalid_request\");\n        }\n\n        if(!req.consentReference) {\n            const report : UsageRecord = { \n                result: \"ACCESS_DENIED\", \n                clientId : req.clientId,\n                subjectId: req.subjectId,\n                serviceDeclarationIds: service.requiredServiceDeclarationIds, \n                requestReference: req.requestReference,\n                serviceProviderId: spis.name,\n                usageTime : action.now!,\n            }\n            return this.send(\n                this.send(\n                    spis,\n                    _send([service.consentService],reportServiceUse()(report))\n                ),\n                _send([action.clientAddress], {type : \"error\", error : \"ACCESS_DENIED\"} as ErrorPayload)\n            )\n        }\n\n        // store inflight query\n        // spis.mem.inflight += [inflight]\n        let reqState : RequestState = { \n            ...req,\n             validationRequestId: requestId(req, service),\n             clientAddress: action.sender,\n        }\n        let withInfligh : ServiceProviderPS = {\n            ...spis, mem: { ...spis.mem, inflight: spis.mem.inflight.concat(reqState) }\n        };\n\n        // send consent reference validation request\n        return this.send(\n            withInfligh, \n            message(\n                action.arena,\n                 withInfligh,\n                  [ service.consentService ],\n                  validateConsentReference()({\n                      asyncId: reqState.validationRequestId,\n                      partyId: spis.name,\n                      consentReference: req.consentReference,\n                      requestReference: req.requestReference,\n                  })\n            )\n        );\n    }\n}\n\nexport const submitRequest = addHandlerClass<ServiceRequest, ProtectedRequestHandler>(ServiceProviderIS, ProtectedRequestHandler);\n\n\nclass ValidationResponseHandler extends GenericMessageHandler<ServiceProviderState, ServiceProviderPS, ValidationResponse, ValidationResponseHandler> {\n    name = ValidationResponseTypeName;\n\n    handle(spis: ServiceProviderPS, action: Message<ValidationResponse>): ServiceProviderPS {\n\n        function _send<P extends Payload>(receivers: string[], m: P): Message<P> {\n            return message(action.arena, spis, receivers, m);     \n        }\n        \n        const reqState = spis.mem.inflight.find(ifr => ifr.validationRequestId === action.message.asyncId);\n        const resp = action.message;\n\n        function removeInflight(spis: ServiceProviderPS): ServiceProviderPS {\n            return { ...spis, mem: { ...spis.mem, inflight: spis.mem.inflight.filter(\n                ifr => (reqState === undefined || ifr.requestReference !== reqState.requestReference)\n            ) }};\n        }\n\n\n        if (reqState === undefined) {\n            console.error(\"Failed to find original inflight request, ignoring the response.\");\n            return spis;\n        }\n\n        const service = spis.mem.services.find(s => s.serviceName === reqState.serviceName);\n        if (service === undefined) {\n            console.error(\"Failed to find the service specified in the original inflight request, ignoring the response.\");\n            return removeInflight(spis);\n        }\n\n        const usageReport : UsageRecord = { \n            result: \"OK\", // will be overwritten\n            clientId : reqState.clientId,\n            subjectId: reqState.subjectId,\n            // fixme: feili korral peaks serviceDeclarationIds olema need, mida kysiti\n            // fixme: ja positiivse vastuse korral need, mille j'rgi teenust tegelt osutati\n            serviceDeclarationIds: action.message.serviceDeclarationId!, \n            consentReference: reqState.consentReference,\n            requestReference: reqState.requestReference,\n            serviceProviderId: spis.name,\n            usageTime : action.now!,\n        }\n\n        if (resp.clientId !== reqState.clientId \n                || resp.consentReference !== reqState.consentReference \n                || resp.dataSubjectId !== reqState.subjectId\n                || !resp.valid) {     \n            return this.send(\n                this.send(\n                    removeInflight(spis),\n                    _send([service.consentService],reportServiceUse()({...usageReport, result : \"ACCESS_DENIED\"}))\n                ),\n                _send([reqState.clientAddress], {type : \"error\", error : \"ACCESS_DENIED\"} as ErrorPayload)\n            )\n        };\n    \n        return this.send(\n            this.send(\n                removeInflight(spis),\n                _send([service.consentService], reportServiceUse()({...usageReport, result : \"OK\"}))\n            ),\n            _send(\n                [reqState.clientAddress],\n                submitResponse()({\n                    records : spis.mem.db\n                        .filter(x => x.subject === reqState.subjectId)\n                        .filter(x => service.returnedDatatypes.includes(x.type)),\n                    asyncId : reqState.requestReference    \n                })\n            )\n        );\n    }\n}\n\nexport const validationResponse = addHandlerClass<ValidationResponse, ValidationResponseHandler>(ServiceProviderIS, ValidationResponseHandler);\n","import { addHandlerClass, Payload, GenericMessageHandler, Message, message, ErrorPayload, updateDb } from \"../Base\";\nimport { ClientIS, ClientState, ClientPS } from \"./types\";\n\nimport { addPurposeDeclaration } from \"../consentService/declarationAPI\";\nimport { getConsentReference, ConsentReferenceResponse, ConsentReferenceResponseTypeName } from \"../consentService/referenceAPI\";\n\nimport { submitRequest } from \"../serviceProvider/messages\";\nimport { ServiceResponse, responseTypeName } from \"../serviceProvider/types\";\n\nimport { hash, address2org } from \"../../util\";\nimport { validateConsentReference } from \"../consentService/validationAPI\";\n\n\ninterface LoginMessage extends Payload {\n    type: typeof LoginMessageHandler.name;\n    user?: string;\n}\n\nclass LoginMessageHandler extends GenericMessageHandler<ClientState, ClientPS, LoginMessage, LoginMessageHandler> {\n    name = \"Client/UI/login\";\n\n    handle(cs: ClientPS, action: Message<LoginMessage>): ClientPS {\n        // reset cached responses when logging in.\n        return { ...cs, mem: { ...cs.mem, ui: { ...cs.mem.ui, user: action.message.user, service: undefined, response: [] } } };\n    }\n}\n\nexport const loginMessage = addHandlerClass<LoginMessage, LoginMessageHandler>(ClientIS, LoginMessageHandler);\n\ninterface SelectServiceMessage extends Payload {\n    type: typeof SelectServiceMessageHandler.name;\n    service?: string;\n}\n\nclass SelectServiceMessageHandler extends GenericMessageHandler<ClientState, ClientPS, SelectServiceMessage, SelectServiceMessageHandler> {\n    name = \"Client/UI/selectService\";\n\n    handle(cs: ClientPS, action: Message<SelectServiceMessage>): ClientPS {\n        let _cs = { ...cs, mem: { ...cs.mem, ui: { ...cs.mem.ui, service: action.message.service, response: [] } } };\n\n        if (_cs.mem.ui.service !== undefined) {\n            // if cached consentref is missing (not asked or known to not exist), ask automatically for new\n            let cachedConsentRefs = _cs.mem.db.consentRefByUser[_cs.mem.ui.user!];\n            let cachedConsentRef = cachedConsentRefs === undefined ? undefined : cachedConsentRefs[_cs.mem.ui.service!];\n            if (cachedConsentRef === undefined || cachedConsentRef === null) {\n                return this.send(_cs, message(action.arena, cs, [cs.mem.db.consentServiceId], \n                    getConsentReference({ \n                        clientId: address2org(cs.name),\n                        subjectId: cs.mem.ui.user,\n                        purposeDeclarationId: action.message.service,\n                        callbackURL: cs.name, // actual address for callback message\n                    })()\n                ));\n            }\n        }\n\n        return _cs;\n    }\n}\n\nexport const selectServiceMessage = addHandlerClass<SelectServiceMessage, SelectServiceMessageHandler>(ClientIS, SelectServiceMessageHandler);\n\n\n\nclass SendDeclarationHandler extends GenericMessageHandler<ClientState, ClientPS, Payload, SendDeclarationHandler> {\n    name = \"Client/UI/declarePurpose\";\n\n    handle(cis: ClientPS, action: Message<Payload>): ClientPS {\n        return this.send(cis, message(action.arena, cis, [ cis.mem.db.consentServiceId ], addPurposeDeclaration()(action.message)))\n    }\n}\n\nexport const declarePurpose = addHandlerClass(ClientIS, SendDeclarationHandler);\n\ninterface FetchConsentReferencePayload extends Payload {\n    type: typeof FetchConsentReferenceHandler.name;\n    purposeDeclarationId: string;\n}\n\nclass FetchConsentReferenceHandler extends GenericMessageHandler<ClientState, ClientPS, FetchConsentReferencePayload, FetchConsentReferenceHandler> {\n    name = \"Client/UI/fetchConsentReference\";\n\n    handle(cis: ClientPS, action: Message<FetchConsentReferencePayload>): ClientPS {\n        return this.send(\n            updateDb<typeof cis.mem.db, ClientState>({\n                ...cis,\n                mem: {\n                    ...cis.mem,\n                    ui: {\n                        ...cis.mem.ui,\n                        service: action.message.purposeDeclarationId\n                    }\n                }\n            }, { \n                consentRefByUser: updateCSRef(\n                    cis.mem.db.consentRefByUser,\n                    cis.mem.ui.user!,\n                    action.message.purposeDeclarationId,\n                    undefined\n                )\n             }), \n            message(action.arena, cis, [cis.mem.db.consentServiceId], getConsentReference({\n                clientId: address2org(cis.name),\n                purposeDeclarationId: action.message.purposeDeclarationId,\n                subjectId: cis.mem.ui.user,\n                callbackURL: cis.name, // actual address for callback message\n            })()\n        ))\n    }\n}\n\nexport const fetchConsentReference = addHandlerClass<FetchConsentReferencePayload, FetchConsentReferenceHandler>(ClientIS, FetchConsentReferenceHandler);\n\nfunction updateCSRef<T extends { [k: string]: any }>(csByUser: T, user: string, purposeDeclarationId: string, consentReference?: string | null): T {\n    return {\n        ...csByUser,\n        [user]: { ...csByUser[user], [purposeDeclarationId]: consentReference }\n    };\n}\n\nclass ConsentReferenceResponseHandler extends GenericMessageHandler<ClientState, ClientPS, ConsentReferenceResponse, ConsentReferenceResponseHandler> {\n    name = ConsentReferenceResponseTypeName;\n\n    handle(cis: ClientPS, action: Message<ConsentReferenceResponse>): ClientPS {\n        return { ...cis, mem: { ...cis.mem, db: { \n            ...cis.mem.db,\n            consentRefByUser: updateCSRef(\n                cis.mem.db.consentRefByUser,\n                cis.mem.ui.user!,\n                action.message.purposeDeclarationId,\n                action.message.consentReference\n            )\n        } } };\n    }\n}\n\nexport const handleConsentRefernceResponse = addHandlerClass<ConsentReferenceResponse, ConsentReferenceResponseHandler>(ClientIS, ConsentReferenceResponseHandler);\n\ninterface ExecuteMessage extends Payload {\n    type: typeof ExecuteRequestHandler.name;\n    requestReference: string; // generated in UI because it should not be done here.\n    purposeId: string;\n    serviceAddress?: string; // only execute one request.\n    serviceName?: string;\n}\n\nclass ExecuteRequestHandler extends GenericMessageHandler<ClientState, ClientPS, ExecuteMessage, ExecuteRequestHandler> {\n    name = \"Client/UI/executeRequest\";\n\n    handle(cis: ClientPS, action: Message<ExecuteMessage>): ClientPS {\n        let req = action.message;\n\n        let userConsentRefs = cis.mem.db.consentRefByUser[cis.mem.ui.user!];\n        let consentReference = userConsentRefs === undefined ? undefined : userConsentRefs[req.purposeId];\n\n        let conf = cis.mem.config.find(c => c.purposeDeclarationId === req.purposeId);\n        if (conf === undefined) {\n            console.error(\"Unknown purpose? \", req);\n            return cis;\n        }\n\n        // send request for all services defined in configuration, or to those that match.\n        return (conf.services\n            .filter(service => ((req.serviceAddress === undefined || req.serviceAddress === service.serviceAddress)\n                    && (req.serviceName === undefined || req.serviceName === service.serviceName)))\n            .reduce((_cis, service) => {\n            let requestReference = hash(req.requestReference + service.serviceName + service.serviceAddress);\n            let cis = undefined;\n            \n            // replace or add response record for this particular purpose/serviceprovider/service\n            let newResponses = (_cis.mem.ui.response || []).filter(\n                r => !(r.purposeDeclarationId === req.purposeId \n                        && r.serviceAddress === service.serviceAddress \n                        && r.serviceName === service.serviceName)\n            ).concat({\n                requestReferenceId: requestReference,\n                purposeDeclarationId: req.purposeId,\n                serviceAddress: service.serviceAddress,\n                serviceName: service.serviceName,\n                data: null,\n            })\n\n            let __cis = { ..._cis, mem: { ..._cis.mem, ui: { \n                ..._cis.mem.ui,\n                 response: newResponses,\n            } } };\n\n            return this.send(__cis, message(action.arena, __cis, [service.serviceAddress], submitRequest({\n                clientId: address2org(__cis.name),\n                serviceName: service.serviceName,\n                subjectId: __cis.mem.ui.user,\n                consentReference: consentReference!,\n                requestReference: requestReference,\n            })()))\n        }, cis));\n    }\n}\n\nexport const executeRequest = addHandlerClass<ExecuteMessage, ExecuteRequestHandler>(ClientIS, ExecuteRequestHandler);\nexport function generateRequestReference() : string {\n    return hash(\"\" + ((Math.random() * 1000000) | 0));\n}\n\n\nclass ServiceResponseHandler extends GenericMessageHandler<ClientState, ClientPS, ServiceResponse, ServiceResponseHandler> {\n    name = responseTypeName;\n\n    handle(cis: ClientPS, action: Message<ServiceResponse>): ClientPS {\n        return { ...cis, mem: { ...cis.mem, ui: {\n            ...cis.mem.ui,\n            response: (cis.mem.ui.response || []).map(\n                r => {\n                    if (r.requestReferenceId === action.message.asyncId) {\n                        return { ...r, data: action.message.records }\n                    } else {\n                        return r;\n                    }\n                }\n            )\n        }}}\n    }\n\n}\n\nexport const submitResponse = addHandlerClass<ServiceResponse, ServiceResponseHandler>(ClientIS, ServiceResponseHandler);\n\nclass ErrorResponseHandler extends GenericMessageHandler<ClientState, ClientPS, ErrorPayload, ErrorResponseHandler> {\n    name = \"error\";\n\n    handle(cis: ClientPS, action: Message<ErrorPayload>): ClientPS {\n        switch (action.message.error) {\n            // assume the respone came for logged in user and for selected service\n            case \"consent_not_found\":\n                return updateDb<typeof cis.mem.db, ClientState>(cis, { \n                    consentRefByUser: updateCSRef(\n                        cis.mem.db.consentRefByUser,\n                        cis.mem.ui.user!,\n                        cis.mem.ui.service!,\n                        null\n                    )\n                });\n        }\n\n        console.log(\"Unknown error, ignoring: \", action);\n        return cis;\n    }\n}\n\naddHandlerClass<ErrorPayload, ErrorResponseHandler>(ClientIS, ErrorResponseHandler);\n\ninterface DumpConsentReferencePayload extends Payload {\n    type: typeof DumpConsentRefCacheHandler.name;\n    purposeDeclarationId?: string;\n}\n\nclass DumpConsentRefCacheHandler extends GenericMessageHandler<ClientState, ClientPS, DumpConsentReferencePayload, DumpConsentRefCacheHandler> {\n    name = \"CS/UI/dumpConsentRefCache\";\n\n    handle(cis: ClientPS, action: Message<DumpConsentReferencePayload>): ClientPS {\n        if (action.message.purposeDeclarationId !== undefined) {\n            return updateDb<typeof cis.mem.db, ClientState>(cis, { \n                consentRefByUser: updateCSRef(\n                    cis.mem.db.consentRefByUser, cis.mem.ui.user!, action.message.purposeDeclarationId, undefined\n                )\n            });\n        }\n        return updateDb<typeof cis.mem.db, ClientState>(cis, { consentRefByUser: {} });\n    }\n}\n\nexport const dumpConsentRefCache = addHandlerClass<DumpConsentReferencePayload, DumpConsentRefCacheHandler>(ClientIS, DumpConsentRefCacheHandler);\n\ninterface ValidateConsentRefMessage extends Payload {\n    consentServiceId: string;\n    consentReference: string;\n}\n\nclass ValidateConsentRefMessageHandler extends GenericMessageHandler<ClientState, ClientPS, ValidateConsentRefMessage, ValidateConsentRefMessageHandler> {\n    name = \"Client/UI/validateConsentRef\";\n\n    handle(cis: ClientPS, action: Message<ValidateConsentRefMessage>): ClientPS {\n        return this.send(\n            cis, \n            message(action.arena, cis, [action.message.consentServiceId || cis.mem.db.consentServiceId],\n                validateConsentReference({ \n                    partyId: cis.name,\n                    consentReference: action.message.consentReference\n                })()\n            )\n        );\n    }\n}\n\nexport const validateConsentRef = addHandlerClass<ValidateConsentRefMessage, ValidateConsentRefMessageHandler>(ClientIS, ValidateConsentRefMessageHandler);\n","import * as React from \"react\";\nimport { ProcessAndArena, Message, message } from \"../Base\";\nimport { ClientState } from \"./types\";\nimport { Modal, Button } from \"react-bootstrap\";\nimport { SimpleSend } from \"../../components/SendButton\";\nimport { loginMessage, selectServiceMessage, fetchConsentReference, executeRequest, generateRequestReference } from \"./messages\";\nimport { connect } from \"react-redux\";\nimport { __, fullname } from \"../../i18n\";\n\ninterface ClientViewProps extends ProcessAndArena<ClientState> {\n    t: any;\n    send: (props: ClientViewProps, values?: any) => Message<any>;\n}\n\n\nconst LOGIN: ClientViewState = \"login\";  // no authenticated user\nconst SELECT_SERVICE: ClientViewState = \"selectService\"; // user authenticated, service not selected\nconst WAIT_FOR_CONSENT_REF: ClientViewState = \"waitForConsent\"; //  no idea if user has consent\nconst CONSENT_NOT_FOUND: ClientViewState = \"consentNotFound\"; // prompt for consent\nconst SERVICE_V1: ClientViewState = \"serviceV1\";\n\ntype ClientViewState = \"login\" | \"selectService\" | \"waitForConsent\" | \"consentNotFound\" | \"serviceV1\";\n\ninterface State {\n    view: ClientViewState;\n    loading: boolean;\n}\n  \n  const Header = ({t, props} : {t: any; props: ClientViewProps}) => (\n  <div className=\"app-header\">\n    <SimpleSend arena={props.arena} owner={props.process} className=\"btn btn-success btn-health\" text={ t('logout') } message={ loginMessage() }/>\n    <div className=\"app-user-icon\">\n      <img alt=\"user icon\" src={require('./../../static/assets/images/user-icon.svg')} />\n    </div>\n    <p className=\"app-user\">{ t('hello').replace(\"USERNAME\", fullname(props.process.mem.ui.user!)) }</p>\n  </div>\n);\n\nfunction send(props: ClientViewProps, values?: any): Message<any> {\n    return message(props.arena, props.process, [props.process.name], values());\n}\n\nfunction currentView(m: ClientState): ClientViewState {\n    if (m.ui.user === undefined) {\n        return LOGIN;\n    } else if (m.ui.service === undefined) {\n        return SELECT_SERVICE;\n    } else if (m.db.consentRefByUser[m.ui.user] === undefined || \n            m.db.consentRefByUser[m.ui.user][m.ui.service] === undefined) {\n        return WAIT_FOR_CONSENT_REF;\n    } else if (m.db.consentRefByUser[m.ui.user][m.ui.service] === null) {\n        return CONSENT_NOT_FOUND;\n    } else {\n        return SERVICE_V1;\n    }\n}\n\nclass ClientView_ extends React.PureComponent<ClientViewProps, State> {\n\n  constructor(props: ClientViewProps) {\n    super(props);\n      this.state = { loading: false, view: currentView(props.process.mem) };\n      switch (this.state.view) {\n        case WAIT_FOR_CONSENT_REF:\n          this.sendMessagesFor(this.state.view);\n      }\n  }\n\n  componentDidMount() {\n    this.componentDidUpdate();    \n  }\n\n  componentDidUpdate() {\n    let actualView = currentView(this.props.process.mem);\n    if (actualView !== this.state.view) {\n      this.setState({ view: actualView });\n    }\n  }\n\n  sendMessagesFor = (view: ClientViewState) => {\n    const mem = this.props.process.mem;\n    switch (view) {\n        case WAIT_FOR_CONSENT_REF:\n            if (mem.ui.user !== undefined && mem.ui.service !== undefined && (\n                    mem.db.consentRefByUser[mem.ui.user] === undefined ||\n                    mem.db.consentRefByUser[mem.ui.user][mem.ui.service] === undefined ||\n                    mem.db.consentRefByUser[mem.ui.user][mem.ui.service] === null)\n            ) {\n                this.props.send(this.props, fetchConsentReference({ purposeDeclarationId: mem.ui.service }));\n            }\n            return;\n\n        case SERVICE_V1:\n            this.props.send(this.props, executeRequest({\n                requestReference: generateRequestReference(),\n                purposeId: mem.ui.service }));\n            return;\n    }\n  }\n\n  state = {\n    view: LOGIN,\n    loading: false\n  };\n\n  changeView = (view: ClientViewState, withMessages = true) => {\n    this.setState({ loading: true });\n    if (withMessages) {\n        this.sendMessagesFor(view);\n    }\n    setTimeout(() => {\n      this.setState({loading: false, view: view});\n    }, 600);\n  };\n\n  render() {\n    const cis = this.props.process;\n    const m = cis.mem;\n    const t = this.props.t;\n\n    const returnButton = (\n      <SimpleSend\n        arena={this.props.arena}\n        owner={this.props.process}\n        className=\"btn btn-light border\"\n        onClick={() => this.changeView(SELECT_SERVICE)}\n        message={selectServiceMessage()}\n        text={ t(\"return\") }\n      />\n    );\n\n    switch (this.state.loading) {\n      case true:\n      return (\n        <div className=\"d-flex align-items-center\">\n          <strong>Loading...</strong>\n          <div className=\"spinner-border ml-auto\" role=\"status\" aria-hidden=\"true\"></div>\n        </div>\n      );\n      default:\n        switch (this.state.view) {\n          case LOGIN:\n          return (\n            <div><form>\n                <h4>{ t(\"please_login\") }</h4>\n                <div>\n                  <div className=\"input-group\">\n                    <input className=\"form-control\" size={10} name=\"user\" defaultValue=\"47302200234\"/>\n                    <div className=\"input-group-append\">\n                      <SimpleSend\n                          arena={this.props.arena}\n                          owner={this.props.process}\n                          className=\"btn btn-light border\"\n                          onClick={() => this.changeView(SELECT_SERVICE)}\n                          message={loginMessage()}\n                          text={ t(\"login\") }\n                      />\n                    </div>\n                  </div>\n                </div>\n                <p className=\"mt-4 mb-0\">\n                    <img alt=\"illustration\" src={require('./../../static/assets/images/login.svg')} width=\"280\" />\n                </p>\n            </form></div>\n          );\n          case SELECT_SERVICE:\n          return (\n            <div>\n              <Header t={t} props={this.props} />\n          <h4>{ t(\"choose_service\") }</h4>\n              {\n                  this.props.process.mem.config.map(\n                      service => {\n                          return (\n                            <SimpleSend \n                                key={ service.purposeDeclarationId }\n                                className=\"btn btn-dark mt-2 mr-2\"\n                                arena={this.props.arena}\n                                owner={this.props.process}\n                                onClick={() => this.changeView(WAIT_FOR_CONSENT_REF)}\n                                message={selectServiceMessage({ service: service.purposeDeclarationId })}\n                                text={ t(\"service\", service.purposeDeclarationId, \"name\") }\n                             />                \n                          )\n                      }\n                  )\n              }\n            </div>\n          );\n          case WAIT_FOR_CONSENT_REF:\n              return (\n                  <div>\n                      <Header t={t} props={this.props} />\n                      <h4>{ t(\"checking_consent\") }</h4>\n                      <p className=\"text-left\">{ t(\"retry_if_timed_out\") }</p>\n                      <SimpleSend\n                            className=\"btn btn-dark\"\n                            arena={this.props.arena}\n                            owner={this.props.process}\n                            message={fetchConsentReference({ purposeDeclarationId: m.ui.service })}\n                            text={ t('retry-fetch') }\n                      />\n                  </div>\n              );\n          case CONSENT_NOT_FOUND:\n          return (\n            <div>\n              <Header t={t} props={this.props} />\n              <h4>{ t(\"service\", m.ui.service!, \"consent-header\") }</h4>\n              <p className=\"text-left\">\n                <small dangerouslySetInnerHTML={{__html: t(\"service\", m.ui.service!, \"consent-intro\")}} />\n              </p>\n              <p>\n                 <button className=\"btn btn-lg btn-primary\" onClick={ev => window.open(\"ui/csui\", this.props.arena + \" - \" + m.db.consentServiceId) }>Annan nõusoleku</button>\n              </p>\n              <p>{ returnButton }</p>\n            </div>\n          );\n          case SERVICE_V1:\n              return (\n                  <div>\n                      <Header t={t} props={this.props} />\n                      <h4>{ t(\"consented_data\") }</h4>\n                      {\n                        (m.ui.response || []).filter(\n                            r => r.purposeDeclarationId === m.ui.service\n                        ).map(\n                            r => (\n                                <span className=\"card\" key={r.serviceAddress + \" \" + r.serviceName}>\n                                    <pre className=\"text-left\">\n                                        {r.serviceAddress}/{r.serviceName}: { JSON.stringify(r.data, undefined, \" \") }\n                                    </pre>\n                                </span>\n                            )\n                        )\n                      }\n                    <p>\n                      <SimpleSend\n                        owner={this.props.process}\n                        arena={this.props.arena}\n                        message={executeRequest({\n                          requestReference: generateRequestReference(),\n                          purposeId: m.ui.service\n                      })} text={ t('load-consented-data') } />\n                    </p>\n                    <p>{ returnButton }</p>\n                  </div>\n              )\n          default:\n          return <div>Unimplemented view: {this.state.view}</div>\n        }\n    }\n  }\n}\n\nconst ClientView = connect(null, { send })(ClientView_);\n\nconst EnduserUI : React.FC<ProcessAndArena<ClientState>> = ({process, arena}) => {\n\n    const t = (...k: string[]) => __({arena, process}, ...k);\n    const [show, setShow] = React.useState(false);\n    const handleClose = () => setShow(false);\n    const handleShow = () => setShow(true);\n\n    return (\n        <>\n        <Modal show={show} onHide={handleClose} size=\"lg\" bsPrefix=\"client-app modal\">\n          <Modal.Header>\n            <Modal.Title>{ t('title') }</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <ClientView arena={arena} process={process} t={t}/>\n          </Modal.Body>\n          <Modal.Footer>\n            <Button variant=\"outline-dark\" onClick={handleClose}>{ t('close') }</Button>\n          </Modal.Footer>\n        </Modal>\n        <Button variant=\"success\" className=\"mr-2 btn-health\" onClick={handleShow}>{t('open-end-user-view')}</Button>\n        </>\n      )\n}\n  \n\nexport default EnduserUI;","import { ProcessAndArena } from \"../Base\";\nimport { ClientState, ClientPS, PurposeDeclarationTemplate, ClientConfig } from \"./types\";\nimport React from \"react\";\nimport { Modal, Button } from \"react-bootstrap\";\nimport { SimpleSend } from \"../../components/SendButton\";\nimport { declarePurpose, executeRequest, fetchConsentReference, generateRequestReference, dumpConsentRefCache, selectServiceMessage, validateConsentRef } from \"./messages\";\nimport EnduserUI from \"./EnduserUI\";\nimport { __, business } from \"../../i18n\";\nimport { address2org } from \"../../util\";\n\n\ninterface ClientViewProps extends ProcessAndArena<ClientState> {\n    process: ClientPS;\n}\n\ntype SDRef = {\n    serviceProviderId: string;\n    serviceDeclarationId: string;\n}\n\nfunction addSDRef(ev: any, opts: SDRef[], setOpts: React.Dispatch<React.SetStateAction<SDRef[]>> ) {\n    ev.preventDefault();\n    let f = ev.currentTarget.form;\n\n    let spId = f._spId.value;\n    let sdId = f._sdId.value;\n\n    if (!spId.match(\"^[!-~]+$\") || !sdId.match(\"^[!-~]+$\")) {\n        return;\n    }\n    \n    setOpts(old => old.concat({ serviceProviderId: spId, serviceDeclarationId: sdId }));\n    f._spId.value = f._sdId.value = \"\";\n}\n\nfunction prefillPurposeDeclaration(ev: any, decls: PurposeDeclarationTemplate[] | undefined, setOpts: React.Dispatch<React.SetStateAction<SDRef[]>> ) {\n    ev.preventDefault();\n  \n    let declId = ev.currentTarget.value;\n  \n    let form = ev.currentTarget.form;\n    let decl = decls!.find(d => d.purposeDeclarationId! === declId);\n    if (decl === undefined) {\n      return;\n    }\n  \n    form[\"name\"].value = decl.name;\n    form[\"purposeDeclarationId\"].value = decl.purposeDeclarationId;\n    form[\"description\"].value = decl.description;\n    if (decl.services !== undefined) {\n        setOpts(decl.services);\n    }\n  }\n  \n  function declarationPrefill(sp: ClientPS, setOpts: React.Dispatch<React.SetStateAction<SDRef[]>>) {\n    if (sp.mem.declTemplate === undefined || sp.mem.declTemplate.length === 0) {\n      return <></>;\n    }\n  \n    return (\n      <div className=\"form-group text-danger\">\n        <label htmlFor=\"prefilled\">Eeltäidetud deklaratsiooni kiirvalik</label>\n        <select \n            className=\"form-control\" \n            id=\"prefilled\" \n            onChange={ ev => prefillPurposeDeclaration(ev, sp.mem.declTemplate, setOpts) }\n            defaultValue=\"\">\n          <option key=\"none\" value=\"\">... vali eeltäidetud deklaratsioon ...</option>\n          {\n            sp.mem.declTemplate.map(dt => (\n              <option key={ dt.purposeDeclarationId } value={ dt.purposeDeclarationId }>{ dt.name! }</option>\n            ))\n          }\n        </select>\n      </div>\n    );\n  }\n  \n\nconst DeclarePurposePopup : React.FC<ClientViewProps> = ({process, arena}) => {\n\n  const t = (k: string) => __({arena, process}, k);\n  const [show, setShow] = React.useState(false);\n  const [sdrefs, setSDRefs] = React.useState([] as SDRef[]);\n  const handleClose = () => setShow(false);\n  const handleShow = () => setShow(true);\n    return (\n        <>\n        <Modal show={show} onHide={handleClose} size=\"xl\">\n        <Modal.Header closeButton>\n            <Modal.Title>Eesmärgideklaratsiooni registreerimine</Modal.Title>\n        </Modal.Header>\n        <form>\n            <Modal.Body>\n              <div className=\"row\">\n                <div className=\"col\">\n                  <small>\n                    { t('purpose-decl-intro') }\n                  </small>\n                </div>\n              </div>\n              <div className=\"row border-bottom mt-4 mb-2\">\n                <div className=\"col\">\n                  <h6>{t('declarer')} { business(address2org(process.name), \"name\") } ({ address2org(process.name) })</h6>\n                  <input name=\"clientId\" type=\"hidden\" value={ address2org(process.name) } />\n                </div>\n              </div>\n              <div className=\"row\">\n                <div className=\"col\">\n                  { declarationPrefill(process, setSDRefs) }\n                </div>\n                <div className=\"col\">\n                  <div className=\"form-group\">\n                    <label htmlFor=\"dIdentifier\">Eesmärgideklaratsiooni identifikaator:</label>\n                    <input name=\"purposeDeclarationId\" type=\"text\" className=\"form-control\" id=\"dIdentifier\" />\n                    <small id=\"dIdentifierHelp\" className=\"form-text text-muted\">Klientrakenduse poolt määratud eesmärgideklaratsiooni identifikaator</small>\n                  </div>\n                </div>\n                <div className=\"col\">\n                  <div className=\"form-group\">\n                    <label htmlFor=\"dName\">Eesmärgideklaratsiooni nimi:</label>\n                    <input name=\"name\" type=\"text\" className=\"form-control\" id=\"dName\" />\n                    <small id=\"dNameHelp\" className=\"form-text text-muted\">Eesmärgi lühike nimi kasutajale näitamiseks</small>\n                  </div>\n                </div>\n              </div>\n              <div className=\"row\">\n                <div className=\"col\">\n                  <div className=\"form-group\">\n                    <label htmlFor=\"dataUsage\">Andmete kasutamise eesmärk:</label>\n                    <textarea name=\"description\" className=\"form-control\" id=\"dataUsage\" rows={3} />\n                    <small id=\"dataUsageHelp\" className=\"form-text text-muted\">Andmesubjekti andmete töötlemise eesmärk. Kuvatakse nõusoleku andmisel andmesubjektile.</small>\n                  </div>\n                </div>\n                <div className=\"col\">\n                  <div className=\"form-group\">\n                    <label htmlFor=\"services\">Kasutatavad teenused:</label>\n                      <select name=\"services\"\n                          className=\"custom-select\"\n                          multiple\n                          id=\"services\"\n                          value={ sdrefs.map(s => JSON.stringify(s)) }\n                          onChange={ () => { /* nop. use X button and adding. */ } }\n                      >\n                          {\n                              sdrefs.map(sdref => (\n                                  <option \n                                      key={ JSON.stringify(sdref) }\n                                      value={ JSON.stringify(sdref) }\n                                  >\n                                          {sdref.serviceProviderId} / {sdref.serviceDeclarationId}\n                                  </option>\n                              ))\n                          }\n                    </select>\n                    <input name=\"_spId\" placeholder=\"teenusepakkuja id\" size={10}/>\n                    <input name=\"_sdId\" placeholder=\"teenuse deklaratsiooni id\" size={10}/>\n                    <button className=\"btn-sm\" onClick={ev => addSDRef(ev, sdrefs, setSDRefs)}>+</button>\n                    <button className=\"btn-sm\" onClick={ev => { ev.preventDefault(); setSDRefs([]); }} title={ t('clear') }>X</button>\n                  </div>\n                </div>\n              </div>\n            </Modal.Body>\n            <Modal.Footer>\n              <Button variant=\"secondary\" onClick={handleClose}>Close</Button>\n              <SimpleSend arena={arena} owner={process} onClick={() => handleClose()} text={ t('declare') } message={declarePurpose()}/>\n            </Modal.Footer>\n        </form>\n        </Modal>\n        <Button variant=\"dark\" onClick={handleShow}>\n            {t('declare')}\n        </Button>\n        </>\n    )\n}\n\n\nfunction countConsentRefs(cis: ClientPS): number {\n    let out : number = 0;\n    Object.keys(cis.mem.db.consentRefByUser).forEach(\n        k => { out += Object.keys(cis.mem.db.consentRefByUser[k]).filter(\n            pd => !!(cis.mem.db.consentRefByUser[k][pd])\n        ).length; }\n    );\n    return out;\n}\n\nfunction purposeView(t: any, purpose: ClientConfig, process: ClientPS, arena: any): React.ReactElement {\n    const consentRef = (process.mem.db.consentRefByUser[process.mem.ui.user!] || {})[purpose.purposeDeclarationId];\n    const consentRefDesc = (consentRef === undefined ? t('consent-ref-not-asked') : consentRef === null ? t('consent-ref-not-found') : consentRef);\n\n    return (\n        <span className=\"card small mt-2\" key={purpose.purposeDeclarationId}>\n            <div className=\"w-100 row no-gutters p-1 align-items-center\">\n                <div className=\"col-auto flex-fill\">\n                    <p>\n                        { t(\"service\", purpose.purposeDeclarationId, \"name\") }<br/>\n                        { t('consent-ref') }{ consentRefDesc }\n                    </p>\n                </div>\n                <div className=\"col-auto\">\n                    <SimpleSend className=\"btn btn-sm btn-outline-secondary\" owner={process} arena={arena} message={executeRequest({\n                        requestReference: generateRequestReference(),\n                        purposeId: purpose.purposeDeclarationId\n                    })} text=\"GO\" title=\"Tee päring kõigile selle eesmärgi teenustele\"/>\n                    <SimpleSend className=\"btn btn-sm btn-outline-secondary ml-1\" owner={process} arena={arena} message={fetchConsentReference({\n                        purposeDeclarationId: purpose.purposeDeclarationId\n                    })} text={ t('fcr') }\n                        title=\"Küsi nõusolekuviide uuesti\"\n                    />\n                    { consentRef &&\n                        <SimpleSend className=\"btn btn-sm btn-outline-secondary ml-1\" owner={process} arena={arena} message={validateConsentRef({\n                            consentReference: consentRef\n                        })} text=\"vcr\"\n                            title=\"Valideeri nõusolekuviide nõusolekuteenuses\"\n                        />\n                    }\n                    { consentRef &&\n                        <SimpleSend className=\"btn btn-sm btn-outline-secondary ml-1\" owner={process} arena={arena} message={dumpConsentRefCache({\n                            purposeDeclarationId: purpose.purposeDeclarationId\n                        })} text=\"rcr\"\n                            title=\"Unusta see nõusolekuviide\"\n                        />\n                    }\n\n                </div>\n            </div>\n            { /*\n            \n            <table className=\"table\">\n                <tbody>\n                    { purpose.services.map(\n                        s => {\n                            const resp = findFrom((process.mem.ui.response || []), { \n                                purposeDeclarationId: purpose.purposeDeclarationId,\n                                serviceAddress: s.serviceAddress,\n                                serviceName: s.serviceName,\n                            });\n\n                            return (\n                                <tr>\n                                    <td>{ s.serviceAddress }<br/>{ s.serviceName }</td>\n                                    <td>{ resp && resp.requestReferenceId }</td>\n                                    <td>{ resp && \n                                        (resp.data === null \n                                            ? t('response-has-no-data') \n                                            : <>{ resp.data.length }{t('data-items-returned')}</>\n                                        )\n                                    }</td>\n                                    <td>\n                                        <SimpleSend \n                                            className=\"btn btn-sm\"\n                                            owner={process}\n                                            arena={arena}\n                                            message={executeRequest({\n                                                requestReference: generateRequestReference(),\n                                                purposeId: purpose.purposeDeclarationId,\n                                                serviceAddress: s.serviceAddress,\n                                                serviceName: s.serviceName,\n                                            })} text=\"GO\"\n                                            title=\"Ainult see päring\"\n                                        />\n                                    </td>\n                                </tr>\n                            )\n                        }\n                    )}\n                </tbody>\n            </table>\n\n                    */}\n        </span>\n    )\n}\n\nfunction hasUser(cis: ClientPS): boolean {\n    return cis.mem.ui.user !== undefined;\n}\n\nexport const ClientRenderer : React.FC<ClientViewProps> = ({process, arena}) => {\n    const t = (...k: string[]) => __({arena, process}, ...k);\n\n    const serviceCount = Object.keys(process.mem.db.purpose).length;\n    const consentRefCount = countConsentRefs(process);\n    const responseCount = (process.mem.ui.response || []).filter(r => r.data !== null).length;\n\n    return (<div>\n        <p>{ hasUser(process) ? `${t('active-user')} : ${process.mem.ui.user}` : `${t('no-active-user')}.` }</p>\n        <p className=\"small\">\n            { /* { serviceCount } { t('services-configured') }<br/> */ }\n            { consentRefCount } { t('consent-refs-cached') }{ consentRefCount > 0 && <SimpleSend className=\"btn-link mt-2\" owner={process} arena={arena} message={dumpConsentRefCache()} text={ t('dump-consent-ref-cache') }/> }<br/>\n            { responseCount } { t('responses-cached') }{ responseCount > 0 && <SimpleSend className=\"btn-link mt-2\" owner={process} arena={arena} message={selectServiceMessage({ service: process.mem.ui.service })} text={ t('dump-response-cache') }/> }\n        </p>\n        <div className=\"row mx-1\">\n            <EnduserUI arena={arena} process={process}/>\n            <DeclarePurposePopup arena={arena} process={process}/>\n        </div>\n        { hasUser(process) && process.mem.config.map(p => purposeView(t, p, process, arena)) } \n      </div>);\n}\n\n\n","import { ClientPS, ClientDefaultView, ClientIS, PurposeDeclarationTemplate, ClientConfig } from './types';\nimport { addRenderer } from '../Base';\nimport { ClientRenderer } from './views';\n\n// Client IS is a small information system that:\n// - has a set of purposes that need data from service providers\n// - is able to declare the purpose \n// - tracks consent refs by user and by purpose declaration id. \n// - has UI that allows a user to authenticate\n// - allows to attempt to use the service as authenticated user\n\n\nexport function createClient(name: string, consentService: string, config: ClientConfig[], decls?: PurposeDeclarationTemplate[]): ClientPS {\n    return {\n        type: ClientIS,\n        view: ClientDefaultView,\n        name: name,\n        title: name,\n        mem: {\n            ui: {},\n            db: {\n                consentServiceId: consentService,\n                consentRefByUser: {},\n                purpose: {}\n            },\n            declTemplate: decls,\n            config: config,\n        },\n        queue: []\n    }\n}\n\naddRenderer(ClientIS, ClientDefaultView, ClientRenderer);","import { ConsentServicePS, ConsentServiceDefaultView, ConsentService } from './types'\nimport { addUi, addRenderer } from '../Base';\nimport { ConsentServiceRenderer } from './views';\n\nexport function createConsentService(name: string): ConsentServicePS {\n    return {\n        type: ConsentService,\n        view: ConsentServiceDefaultView,\n        name: name,\n        title: name,\n        mem: {\n            ui: {\n                activePurposeDeclaration: {},\n            },\n            db: {\n                serviceDeclarations: [],\n                purposeDeclarations: [],\n                consents: [],\n                usageLog: [],\n            }\n        },\n        queue: [],\n    };\n}\n\naddRenderer(ConsentService, ConsentServiceDefaultView, ConsentServiceRenderer);\naddUi(ConsentService, './ui/csui');\n","import { ConsentServicePS, ConsentServiceState } from './types';\nimport { ProcessAndArena } from '../Base';\nimport React from 'react';\nimport { UILink } from '../../components/Process';\nimport { __ } from '../../i18n';\n\nexport interface CSViewProps extends ProcessAndArena<ConsentServiceState> {\n    process: ConsentServicePS;\n}\n\nexport const ConsentServiceRenderer : React.FC<CSViewProps> = ({process, arena}) => {\n    const t = (...k: string[]) => __({process, arena}, ...k);\n\n    const now = (Date.now() / 1000) | 0;\n\n    return (<div>\n        <p>{ process.mem.ui.user !== undefined ? `${t('active-user')} : ${process.mem.ui.user}` : `${t('no-active-user')}.` }</p>\n        <p className=\"small\">\n            { process.mem.db.serviceDeclarations.length } { t('service-declarations')}, <br/>\n            { process.mem.db.purposeDeclarations.length } { t('purpose-declarations')}, <br/>\n            { process.mem.db.consents.filter(c => (!c.revoked && c.validFrom <= now && c.validUntil >= now)).length } { t('active-consents')}, <br/>\n            { process.mem.db.consents.length } { t('total-consents')}\n        </p>\n        <UILink process={process} arena={arena} button={true}> { t('open-end-user-view') }</UILink>\n      </div>);\n}\n\n","import React from \"react\";\nimport { Modal, Button } from \"react-bootstrap\";\n\nimport { ProcessAndArena } from \"../Base\";\nimport { SimpleSend } from \"../../components/SendButton\";\n\nimport { ServiceProviderState, ServiceProviderPS, ServiceDeclarationTemplate } from \"./types\";\nimport { declareService, addData } from './messages';\nimport { __, business } from \"../../i18n\";\nimport { address2org } from \"../../util\";\n\nexport interface ServiceProviderViewProps extends ProcessAndArena<ServiceProviderState> {\n    process: ServiceProviderPS;\n}\n\nconst updateMaxDuration = (ev: any) => {\n  let f = ev.currentTarget.form!;\n  let v = f[\"consentMaxDurationSeconds\"].value = \n    (f[\"_mdValue\"].value - 0) * (f[\"_mdUnit\"].value) * 24 * 3600;\n  f[\"_mdValue\"].className = \"form-control\" + (v < 1 ? \" is-invalid\" : \"\");\n};\n\nfunction prefillServiceDeclaration(ev: any, decls?: ServiceDeclarationTemplate[]) {\n  ev.preventDefault();\n\n  let declId = ev.currentTarget.value;\n\n  let form = ev.currentTarget.form;\n  let decl = decls!.find(d => d.serviceDeclarationId! === declId);\n  if (decl === undefined) {\n    return;\n  }\n\n  form[\"name\"].value = decl.name;\n  form[\"serviceDeclarationId\"].value = decl.serviceDeclarationId;\n  form[\"technicalDescription\"].value = decl.technicalDescription;\n  form[\"description\"].value = decl.description;\n  form[\"needSignature\"].checked = decl.needSignature === true;\n  let md = decl.consentMaxDurationSeconds || (1 * 365 * 24 * 3600);\n  md = ((md / (24 * 3600)) | 0);\n  if (md > 365) {\n    form[\"_mdValue\"].value = ((md / 365) | 0);\n    form[\"_mdUnit\"].value = 365;\n  } else if (md > 30) {\n    form[\"_mdValue\"].value = ((md / 30) | 0);\n    form[\"_mdUnit\"].value = 30;\n  } else {\n    form[\"_mdValue\"].value = md;\n    form[\"_mdUnit\"].value = 1;\n  }\n\n  updateMaxDuration({ currentTarget: form[\"consentMaxDurationSeconds\"]});\n}\n\nfunction declarationPrefill(sp: ServiceProviderPS) {\n  if (sp.mem.declTemplate === undefined || sp.mem.declTemplate.length === 0) {\n    return <></>;\n  }\n\n  return (\n    <div className=\"form-group text-danger\">\n      <label htmlFor=\"prefilled\">Eeltäidetud deklaratsiooni kiirvalik</label>\n      <select className=\"form-control\" id=\"prefilled\" onChange={ ev => prefillServiceDeclaration(ev, sp.mem.declTemplate) } defaultValue=\"\">\n        <option key=\"none\" value=\"\">... vali eeltäidetud deklaratsioon ...</option>\n        {\n          sp.mem.declTemplate.map(dt => (\n            <option key={ dt.serviceDeclarationId } value={ dt.serviceDeclarationId }>{ dt.name! }</option>\n          ))\n        }\n      </select>\n    </div>\n  );\n}\n\nconst DeclareServicePopup : React.FC<ServiceProviderViewProps> = ({process, arena}) => {\n\n    const t = (...k: string[]) => __({process, arena}, ...k);\n    const [show, setShow] = React.useState(false);\n    const handleClose = () => setShow(false);\n    const handleShow = () => setShow(true);\n   \n      return (\n        <>\n        <Modal show={show} onHide={handleClose} size=\"xl\">\n        <Modal.Header closeButton>\n          <Modal.Title>Teenusedeklaratsiooni registreerimine</Modal.Title>\n        </Modal.Header>\n        <form>\n          <Modal.Body>\n              <div className=\"row\">\n                <div className=\"col\">\n                  <small>\n                    { t('service-decl-intro') }\n                  </small>\n                </div>\n              </div>\n\n              <div className=\"row border-bottom mt-4 mb-2\">\n                <div className=\"col\">\n                  <h6>{t('declarer')} { business(address2org(process.name), \"name\") } ({ address2org(process.name) })</h6>\n                  <input name=\"serviceProviderId\" type=\"hidden\" value={ address2org(process.name) } />\n                </div>\n              </div>\n\n              <div className=\"row\">\n                <div className=\"col\">\n                  { declarationPrefill(process) }\n                </div>\n                <div className=\"col\">\n                  <div className=\"form-group\">\n                    <label htmlFor=\"sdIdentifier\">Teenusedeklaratsiooni identifikaator:</label>\n                    <input name=\"serviceDeclarationId\" type=\"text\" className=\"form-control\" id=\"sdIdentifier\" />\n                    <small id=\"sdIdentifierHelp\" className=\"form-text text-muted\">Andmekogu poolt määratud teenusedeklaratsiooni masinloetav identifikaator.</small>\n                  </div>\n                </div>\n                <div className=\"col\">\n                  <div className=\"form-group\">\n                    <label htmlFor=\"sdName\">Teenusedeklaratsiooni nimi:</label>\n                    <input name=\"name\" type=\"text\" className=\"form-control\" id=\"sdName\" />\n                    <small id=\"sdNameHelp\" className=\"form-text text-muted\">Teenusedeklaratsiooni identifikaator inimloetaval kujul. Soovitatavalt teenuse kood/nimi ja vajadusel alamteenuse identifikaator.</small>\n                  </div>\n                </div>\n              </div>\n\n              <div className=\"row\">\n                <div className=\"col\">\n                  <div className=\"form-group\">\n                    <label htmlFor=\"sdTechDescription\">Teenuse tehniline kirjeldus:</label>\n                    <textarea name=\"technicalDescription\" className=\"form-control\" id=\"sdTechDescription\" rows={3} />\n                    <small id=\"sdTechDescriptionHelp\" className=\"form-text text-muted\">Teenuse ja selle osutamise tehniline kirjeldus. Kasutamiseks klientsüsteemide haldajatele</small>\n                  </div>\n                </div>\n                <div className=\"col\">\n                  <div className=\"form-group\">\n                    <label htmlFor=\"sdDescription\">Teenuse andmekoosseisu kirjeldus:</label>\n                    <textarea name=\"description\" className=\"form-control\" id=\"sdDescription\" rows={3}/>\n                    <small id=\"sdDescriptionHelp\" className=\"form-text text-muted\">Teenuse inimloetav kirjeldus. Tagastatavad andmed, teenuse sisu jne. Kuvatakse nõusoleku andmisel andmesubjektile.</small>\n                  </div>\n                </div>\n                <div className=\"col\">\n                  <div className=\"form-group\">\n                    <input type=\"hidden\" name=\"consentMaxDurationSeconds\" value={1 * 365 * 24 * 3600 }/>\n                    <label htmlFor=\"maxDuration\">Nõusoleku maksimaalne kehtivusaeg:</label>\n                    <div className=\"form-row\">\n                      <div className=\"form-group col-md\">\n                        <input type=\"number\" size={3} className=\"form-control\" id=\"maxDuration\" name=\"_mdValue\" onChange={updateMaxDuration} defaultValue={1}/>\n                      </div>\n                      <div className=\"form-group col-md\">\n                        <select name=\"_mdUnit\" className=\"form-control input-group-append\" onChange={updateMaxDuration}>\n                          <option value={ 365 }>{ t('year') }</option>\n                          <option value={  30 }>{ t('month') }</option>\n                          <option value={   1 }>{ t('day') }</option>\n                        </select>\n                      </div>\n                    </div>\n                  </div>\n                  <div className=\"form-group\">\n                    <div className=\"form-check\">\n                      <input name=\"needSignature\" className=\"form-check-input\" type=\"checkbox\" id=\"signature\" value=\"true|false\"/>\n                      <label className=\"form-check-label\" htmlFor=\"signature\">Vajab digiallkirja?</label>\n                      <small id=\"signatureHelp\" className=\"form-text text-muted\">Märgista see väli, kui andmesubjekt peab selle teenuse andmetele nõusoleku andmisel nõusoleku digitaalselt allkirjastama.</small>\n                    </div>\n                  </div>\n                </div>\n              </div>\n          </Modal.Body>\n          <Modal.Footer>\n            <Button variant=\"secondary\" onClick={handleClose}>{ t('close')}</Button>\n            <SimpleSend arena={arena} owner={process} onClick={() => handleClose()} text={ t('declare') } message={ declareService() }/>\n          </Modal.Footer>\n        </form>\n      </Modal>\n      <Button variant=\"dark\" onClick={handleShow}>\n        {t('declare')}\n      </Button>\n\n         </>\n      )\n  }\n  \n\nexport const ServiceProviderRenderer : React.FC<ServiceProviderViewProps> = ({process, arena}) => {\n    const t = (...k: string[]) => __({process, arena}, ...k);\n    const [show, setShow] = React.useState(false);\n    const handleClose = () => setShow(false);\n    const handleShow = () => setShow(true);\n    const allValues : string[] = (() => {\n      let values = process.mem.services.map(s => s.returnedDatatypes).flat().concat(process.mem.db.map(r => r.type));\n      values.sort();\n      let out : string[] = [];\n      values.forEach((v) => { if (out.length === 0 || v !== out[out.length - 1]) out.push(v); });\n      return out;\n    })();\n    return (<div>\n        <p className=\"small\">\n          {/* process.mem.services.length } { t('services-defined') }<br/> //FIXME: Confusing for demo audience?*/ }\n          { process.mem.db.length } <button className=\"btn-link\" onClick={handleShow}>{ t('records-in-db') }</button>\n        </p>\n        <Modal show={show} onHide={handleClose} size=\"lg\">\n          <Modal.Header>\n            <Modal.Title>{ t('database') }: { t('title') }</Modal.Title>\n          </Modal.Header>\n          <Modal.Body>\n            <form>\n                <table className=\"table\">\n                    <thead>\n                        <tr>\n                            <th className=\"border-top-0\">id</th>\n                            <th className=\"border-top-0\">type</th>\n                            <th className=\"border-top-0\">subject</th>\n                            <th className=\"border-top-0\">data</th>\n                            <th className=\"border-top-0\"></th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                    { \n                        process.mem.db.map(r => (\n                            <tr key={ r.key }>\n                                <td>{ r.key }</td>\n                                <td>{ r.type }</td>\n                                <td>{ r.subject }</td>\n                                <td>{ JSON.stringify(r.data, undefined, \" \") }</td>\n                                <td>\n                                    <SimpleSend arena={arena} owner={process} text=\"-\" message={\n                                        addData({ key: r.key, datatype: undefined, subject: undefined, data: undefined })\n                                    }/>\n                                </td>\n                            </tr>\n                        ))\n                    }\n                    <tr key=\"add\">\n                        <td><input className=\"form-control\" type=\"text\" size={10} name=\"key\" defaultValue={ (Math.random() * 10000) | 0 }/></td>\n                        <td><input className=\"form-control\" type=\"text\" size={8} name=\"datatype\" \n                            defaultValue={ allValues.length > 0 ? allValues[0] : \"\" } /></td>\n                        <td><input className=\"form-control\" type=\"text\" size={10} name=\"subject\"/></td>\n                        <td><input className=\"form-control\" type=\"text\" size={10} name=\"data\"/></td>\n                        <td><SimpleSend arena={arena} owner={process} text=\"+\" message={addData()} onClick={(ev) => {\n                            let f = ev.currentTarget.form;\n                            f.key.value = (Math.random() * 10000) | 0;\n                            f.datatype.value = \"\";\n                            f.subject.value = \"\";\n                            f.data.value = \"\";\n                        }} /></td>\n                    </tr>\n                    </tbody>\n                </table>\n            </form>\n          </Modal.Body>\n          <Modal.Footer>\n            <Button variant=\"secondary\" onClick={handleClose}>{ t('close') }</Button>\n          </Modal.Footer>\n        </Modal>\n        <DeclareServicePopup arena={arena} process={process}/>\n      </div>);\n}\n\n","import { ServiceConfig, ServiceProviderPS, ServiceProviderDefaultView, ServiceProviderIS, SecretRecord, ServiceDeclarationTemplate } from \"./types\";\nimport { addRenderer } from \"../Base\";\nimport { ServiceProviderRenderer } from \"./views\";\n\n\nexport function createServiceProvider(name: string, title: string, config: ServiceConfig[], db?: SecretRecord[], decls?: ServiceDeclarationTemplate[]): ServiceProviderPS {\n    return {\n        type: ServiceProviderIS,\n        view: ServiceProviderDefaultView,\n        name: name,\n        title: title,\n        mem: {\n            db: db === undefined ? [] : db,\n            services: config,\n            inflight: [],\n            declTemplate: decls,\n        },\n        queue: []\n    };\n}\n\naddRenderer(ServiceProviderIS, ServiceProviderDefaultView, ServiceProviderRenderer);\n","import { createCounter } from \"./process/Counter\";\nimport { createTokenNode } from \"./process/TokenRing\";\nimport { ProcessState } from \"./process/Base\";\nimport { createArena } from \"./components/Arena\";\nimport { fromArray } from \"./byNameStore\";\nimport { TheatreState } from \"./components/Theatre\";\nimport { createClient } from \"./process/client/constructor\";\nimport { createConsentService } from \"./process/consentService/constructor\";\nimport { createServiceProvider } from \"./process/serviceProvider/constructor\";\nimport { SecretRecord } from \"./process/serviceProvider/types\";\nimport { LogRendererMap, consentRefApiLogRenderers, addLogRenderers } from \"./components/LogRows\";\n\n// initial configuration\n\ntype ConfigType = { \n    defaultArena: string;\n    arenas: { [name: string]: { processes: ProcessState<any>[]; logRenderers?: LogRendererMap }; }\n};\n\n\nconst CS1Address = \"EE/GOV/70009770/nt\";\n\nconst config : ConfigType = {\n    defaultArena: \"demo\",\n    // arenas: arena -> [process]\n    arenas: {\n        \"demo\": {\n            processes: [\n                createClient(\"EE/COM/10112345/healthstartup\", CS1Address, [ // client configuration\n                    { // vaktsineerimise meeldetuletused\n                        purposeDeclarationId: \"tervisepaevik_vaktsineerimised\",\n                        services: [\n                            {\n                                serviceAddress: \"EE/GOV/70009770/digilugu\",\n                                serviceName: \"hl7!1.3.6.1.4.1.28284.6.1.1.282\",\n                            }\n                        ]\n                    },\n                    { // terviseandmete visualiseerimine\n                        purposeDeclarationId: \"tervisepaevik_visualiseerimine\",\n                        services: [\n                            { // diagnoosid\n                                serviceAddress: \"EE/GOV/70009770/digilugu\",\n                                serviceName: \"hl7!1.3.6.1.4.1.28284.6.1.1.32\",\n                            },\n                            { // uuringud\n                                serviceAddress: \"EE/GOV/70009770/digilugu\",\n                                serviceName: \"hl7!1.3.6.1.4.1.28284.6.1.1.35\",\n                            }\n                        ]\n                    }\n                ], [ // prefilled service declaration templates\n                    {\n                        purposeDeclarationId: \"tervisepaevik_visualiseerimine\",\n                        name: \"Terviseandmete visualiseerimine\",\n                        description: \"HealthStartup diagnooside ja uuringute tulemuste visualiseerimist pakkuv teenus.\\n\\n\" +\n                            \"Nõusoleku tagasivõtmisel kustutab HealthStartup kõik Sinu kohta saadud andmed.\",\n                        services: [\n                            { serviceProviderId: \"EE/GOV/70009770\", serviceDeclarationId: \"hl7_diagnoosid\" },\n                            { serviceProviderId: \"EE/GOV/70009770\", serviceDeclarationId: \"hl7_uuringud\" }\n                        ]\n                    },\n                    {\n                        purposeDeclarationId: \"tervisepaevik_vaktsineerimised\",\n                        name: \"Vaktsineerimiste meeldetuletused\",\n                        description: \"HealthStartup vaktsineerimiste meeldetuletusi ja immuniseerimisplaani pakkuv teenus.\\n\\n\" +\n                           \"Nõusoleku tagasivõtmisel kustutab HealthStartup kõik Sinu kohta saadud andmed.\",\n                        services: [\n                            { serviceProviderId: \"EE/GOV/70009770\", serviceDeclarationId: \"hl7_immuniseerimispass\" }\n                        ]\n                    }\n                ]),\n            \n                createServiceProvider(\"EE/GOV/70009770/digilugu\", \"Tervise Infosüsteem\", [ // services\n                    { // immuniseerimispassi teenus\n                        serviceName: \"hl7!1.3.6.1.4.1.28284.6.1.1.282\",\n                        consentService: CS1Address,\n                        requiredServiceDeclarationIds: [ \"hl7_immuniseerimispass\" ],\n                        returnedDatatypes: [ \"immuniseerimine\" ]\n                    },\n                    { // uuringute päringu teenus\n                        serviceName: \"hl7!1.3.6.1.4.1.28284.6.1.1.35\",\n                        consentService: CS1Address,\n                        requiredServiceDeclarationIds: [ \"hl7_uuringud\" ],\n                        returnedDatatypes: [ \"uuring\" ]\n                    },\n                    { // \n                        serviceName: \"hl7!1.3.6.1.4.1.28284.6.1.1.32\",\n                        consentService: CS1Address,\n                        requiredServiceDeclarationIds: [ \"hl7_diagnoosid\" ],\n                        returnedDatatypes: [ \"diagnoos\" ],\n                    }\n                ], [ // secret data\n                    createData(\"01234567890\", \"diagnoos\", { diagnoos: \"A01\", arst: \"D03677\" }),\n                    createData(\"12345678901\", \"diagnoos\", { diagnoos: \"J01\", arst: \"D08031\"}),\n                    createData(\"47302200234\", \"diagnoos\", { diagnoos: \"J00\", arst: \"D05076\" }),\n                    createData(\"47302200234\", \"uuring\", { uuring: \"uuring 1\", arst: \"D12345\", vastus: \"korras.\" }),\n                    createData(\"47302200234\", \"immuniseerimine\", { \n                        haigus: \"A-gripp\", preparaat: \"Vaxigriptetra\", seeria:\"A2321-3232\", jrk: 3, uuesti: \"2020-10-22\"\n                    }),\n                ], [ // prefilled service declaration templates\n                    {\n                        serviceDeclarationId: \"hl7_uuringud\",\n                        name: \"Uuringute päring\",\n                        technicalDescription: \"X-tee teenuse 'hl7' päring, HL7 OID: 1.3.6.1.4.1.28284.6.1.1.35\",\n                        description: \"Andmekogule saadetakse päringu parameetrina Sinu isikukood.\\n\\n\" +\n                            \"Andmekogust Tervise Infosüsteem saadakse iga Sinu uuringu kohta järgmised andmed:\\n\" +\n                            \"  * Sinu andmed: nimi ja isikukood:\\n\" +\n                            \"  * Uuringu andmed:\\n\" +\n                            \"    * Uuringu tegemise aeg ja koht (raviasutus)\\n\" +\n                            \"    * Proovimaterjali tüüp\\n\" +\n                            \"    * Uuringu tüüp\\n\" +\n                            \"    * Uuringu vastus\\n\" +\n                            \"  * Uuringu teostanud tervishoiutöötaja andmed: nimi, kood ja tervishoiuasutuse andmed\",\n                        needSignature: true,\n                        consentMaxDurationSeconds: 5 * 365 * 24 * 3600,\n                    },\n                    {\n                        serviceDeclarationId: \"hl7_diagnoosid\",\n                        name: \"Diagnooside päring\",\n                        technicalDescription: \"X-tee teenuse 'hl7' päring, HL7 OID: 1.3.6.1.4.1.28284.6.1.1.32\",\n                        description: \"Andmekogust Tervise Infosüsteem saadakse iga Sinu diagnoosi kohta järgmised andmed:\\n\" +\n                            \"  * Sinu andmed: nimi ja isikukood\\n\" +\n                            \"  * Haigusjuhtumi andmed: diagnoosi andmise aeg, diagnoos\\n\" +\n                            \"  * Diagnoosi andnud tervishoiutöötaja andmed: nimi, kood ja tervishoiuasutuse andmed\",\n                        needSignature: true,\n                        consentMaxDurationSeconds: 5 * 365 * 24 * 3600,\n                    },\n                    {\n                        serviceDeclarationId: \"hl7_immuniseerimispass\",\n                        name: \"Immuniseerimispassi päring\",\n                        technicalDescription: \"X-tee teenuse 'hl7' päring, HL7 OID: 1.3.6.1.4.1.28284.6.1.1.282\",\n                        description: \"Andmekogust Tervise Infosüsteem saadakse iga Sinu immuniseerimise kohta järgmised andmed:\\n\" +\n                        \"  * Sinu andmed: nimi ja isikukood\\n\" +\n                        \"  * Immuniseerimise andmed:\\n\" +\n                        \"    * Haigus mille vastu immuniseeriti\\n\" +\n                        \"    * Immuniseerimise kuupäev\\n\" +\n                        \"    * Immuunpreparaadi nimi, partii number ja manustatud annus\\n\" +\n                        \"    * Mitmes annus\\n\" +\n                        \"    * Järgmine immuniseerimise varaseim kuupäev\\n\" +\n                        \"  * Immuniseerija andmed: nimi, kood ja tervishoiuasutuse andmed\", \n                        needSignature: true,\n                        consentMaxDurationSeconds: 5 * 365 * 24 * 3600,\n                    },\n                    \n                ]),\n\n                createConsentService(\"EE/GOV/70009770/nt\"),\n            ],\n            logRenderers: {\n                ...consentRefApiLogRenderers\n            },\n        },\n\n\n        \"singleCounter\": { processes: [\n          createCounter(\"counter1\"),\n        ]},\n\n        \"tokenRing\": { processes: [\n          createTokenNode(\"sd.title\", \"a\", \"b\"),\n          createTokenNode(\"pd.title\", \"b\", \"c\"),\n          createTokenNode(\"ca.title\", \"c\", \"c\"),\n        ]}\n    }\n};\n\nexport function createData(subjectId: string, type: string, data: any): SecretRecord {\n    return {\n        key: \"\" + ((Math.random() * 10000) | 0),\n        type: type,\n        subject: subjectId,\n        data: data\n    };\n}\n\n\n\nexport function initialTheatre(): TheatreState {\n    return {\n        name: \"theatre\",\n        arenas: fromArray(Object.keys(config.arenas).map(a => createArena(a, config.arenas[a].processes))),\n        active: config.defaultArena,\n    }\n}\n\nObject.keys(config.arenas).forEach(arena => {\n    if (config.arenas[arena].logRenderers !== undefined) {\n        addLogRenderers(arena, config.arenas[arena].logRenderers!);\n    }\n})\n","import React from 'react';\nimport { connect } from 'react-redux';\n\nimport { ArenaState, Arena, reduceArena, ArenaActionType } from './Arena';\nimport { AppState } from '../store';\nimport { ByNameStore, reduceByName } from '../byNameStore';\nimport { initialTheatre } from '../config';\nimport { AnyAction } from 'redux';\n\ntype Arenas = ByNameStore<ArenaState>;\n\nexport interface TheatreState {\n    name: string;\n    arenas: Arenas;\n    active: string;\n}\n\nexport function selectArena(state: AppState, arena: string) {\n    return state.theatre.arenas.byName[arena];\n}\n\nconst SELECT_ARENA = \"Theatre/SELECT_ARENA\";\ninterface SelectArenaAction extends AnyAction {\n    type: typeof SELECT_ARENA;\n    arena: string;\n}\n\n// function selectArenaMessage(arena: string): SelectArenaAction {\n//     return { type: SELECT_ARENA, arena: arena };\n// }\n\nexport function reduceTheatre(state: TheatreState = initialTheatre(), action: any): TheatreState {\n    switch (action.type) {\n        case SELECT_ARENA:\n            return ({ ...state, active: action.arena });\n        default:\n            return ({ ...state, arenas: reduceByName(state.arenas, (a) => reduceArena(a, action as ArenaActionType)) });\n        }\n}\n\ninterface TheatreProps {\n    theatre: TheatreState;\n}\n\nclass _Theatre extends React.PureComponent<TheatreProps> {\n    // <ArenaSelector arenaNames={ this.props.theatre.arenas.allNames }/>\n    componentDidMount() {\n        require('../App.css');\n        require('../bootstrap.css');\n    }\n\n    render() {\n        return (\n            <div>\n                <Arena arena={ this.props.theatre.arenas.byName[this.props.theatre.active] }/>\n            </div>\n\n        )\n    }\n}\n\nexport const Theatre = connect(mapStateToProps)(_Theatre);\n\nfunction mapStateToProps(state: AppState) {\n    return { theatre: state.theatre }\n}\n\n\n// interface ArenaSelectorProps {\n//     arenaNames: string[];\n//     selectArenaMessage: (arena: string) => void; \n// }\n\n// class ArenaSelectorComponent extends React.PureComponent<ArenaSelectorProps> {\n//     render() {\n//         return (\n//             <select onChange={(ev) => this.props.selectArenaMessage(ev.currentTarget.value)}>\n//                 { this.props.arenaNames.map(n => (<option value={n} key={n}>{n}</option>))}\n//             </select>\n//         );\n//     }\n// }\n\n// const ArenaSelector = connect(undefined, { selectArenaMessage })(ArenaSelectorComponent);\n","import { BackendAPI } from \"../../../postMessage\";\nimport { ConsentServiceState, PurposeDeclaration, Consent, UsageRecord, PurposeDeclarationRef, findFrom, ServiceDeclarationRef, ServiceDeclaration } from \"../types\";\nimport React, { useContext } from \"react\";\nimport { loginMessage, giveConsentMessage, revokeConsentMessage, activatePurposeDeclarationMessage } from \"../ui\";\nimport { hash } from \"../../../util\";\nimport { fixRevoked } from \"../referenceAPI\";\n\nexport class ConsentServiceBackend extends BackendAPI<ConsentServiceState> {\n    login(ev:any, user?: string) {\n        console.log(\"login(\", user, \")\");\n        ev.preventDefault();\n        this.post(loginMessage({ user }));\n    }\n\n    giveConsentByPurpose(ev: any, services : ServiceDeclarationRef[], clientId: string, purposeDeclarationId: string) {\n        console.log(`giveConsent(${clientId}, ${purposeDeclarationId})`);\n        ev.preventDefault();\n        const expiresIn = services.map( s => this.getServiceDeclaration(s)!.consentMaxDurationSeconds).sort()[0];\n        this.post(giveConsentMessage({\n            dataSubject: this.mem!.ui.user,\n            clientId: clientId,\n            purposeDeclarationId: purposeDeclarationId,\n            validFrom: (Date.now() / 1000) | 0,\n            validUntil: this.getValidUntil(services),\n            revoked: false,\n            // for technical reasons, we issue consentReference here. \n            // in real system it happens in (real) backend. \n            consentReference: hash(clientId + purposeDeclarationId + Date.now())\n        }))\n    }\n\n    revokeConsent(ev: any, consentReference: string) {\n        console.log(`revokeConsent(${consentReference})`);\n        ev.preventDefault();\n        this.post(revokeConsentMessage({ consentReference, revokeAt : Math.floor(Date.now()/1000) }))\n    }\n\n    // parameetrita/valid === undefined -> k]ik aktiivse kasutaja konsendid\n    // parameetriga -> ainult need, mis kas kehtivad v]i mitte\n    getConsents(valid?: boolean): Consent[] {\n        if (this.mem === undefined) {\n            return [];\n        }\n\n        let now = (Date.now() / 1000) | 0;\n        let user = this.mem.ui.user!;\n\n        return (this.mem.db.consents\n            .map(fixRevoked(now))\n            .filter(\n                c => (c.dataSubject === user \n                    && (valid === undefined \n                        || (valid === (c.validFrom <= now && c.validUntil >= now && !c.revoked)))) \n        ));\n    }\n\n    // need asjad kõlbavad consendi andmiseks FIXME seda vist pole enam vaja\n    getPDsWithoutValidConsent(): PurposeDeclaration[] {\n        if (this.mem === undefined) {\n            console.error(\"Not connected? No local state yet\");\n            return [];\n        }\n\n        let consents = this.getConsents(true);\n\n        return this.mem!.db.purposeDeclarations.filter(\n            pd => consents.find(c => (c.clientId === pd.clientId && c.purposeDeclarationId === pd.purposeDeclarationId)) === undefined\n        );\n    }\n\n    getUsageLogRecords(): UsageRecord[] {\n        if (this.mem === undefined) {\n            return [];\n        }\n\n        return this.mem.db.usageLog.filter(ur => ur.subjectId === this.mem!.ui.user);\n    }\n\n    activatePurposeDeclaration(ev: any, ref: PurposeDeclarationRef) {\n        ev.preventDefault();\n        if (this.mem === undefined) {\n            return;\n        }\n\n        this.post(activatePurposeDeclarationMessage(ref));\n    }\n\n    getActivePurposeDeclaration(): PurposeDeclaration | undefined {\n        if (this.mem === undefined || this.mem.ui.activePurposeDeclaration === undefined || this.mem.ui.activePurposeDeclaration[this.mem.ui.user!] === undefined) {\n            return undefined;\n        }\n\n        let candidate = findFrom(\n            this.mem.db.purposeDeclarations,\n            { ...this.mem.ui.activePurposeDeclaration[this.mem.ui.user!], callbackURL: undefined } as PurposeDeclarationRef\n        );\n\n        if (candidate === undefined || \n            findFrom(this.getConsents(true), { // if there is a valid consent for that candidate\n                clientId: candidate.clientId,\n                purposeDeclarationId: candidate.purposeDeclarationId\n            }) !== undefined) {\n\n            return undefined;\n        }\n        return {...candidate, validUntil: this.getValidUntil(this.mem.db.serviceDeclarations)};\n    }\n\n    getServiceDeclaration(ref: ServiceDeclarationRef): ServiceDeclaration | undefined {\n        if (this.mem === undefined) {\n            return undefined;\n        }\n\n        return findFrom(this.mem.db.serviceDeclarations, ref);\n    }\n\n    getPurposeDeclaration(ref: PurposeDeclarationRef): PurposeDeclaration | undefined {\n        if (this.mem === undefined) {\n            return undefined;\n        }\n\n        return findFrom(this.mem.db.purposeDeclarations, ref);\n    }\n\n    getValidUntil(services : ServiceDeclarationRef[]) {\n        const expiresIn = services.map( s => this.getServiceDeclaration(s)!.consentMaxDurationSeconds).sort()[0];\n        return Number(Math.floor(Date.now() / 1000)) + Number(expiresIn)\n    }\n}\n\nexport const CSBackend = React.createContext(undefined as (ConsentServiceBackend | undefined));\n\nexport class Backend {\n  use() {\n    const ctx = useContext(CSBackend);\n    return (ctx === undefined || ctx === null) ? ctx : new ConsentServiceBackend(ctx);\n  }\n}\n","import * as React from 'react';\n\n// <div className=\"footer-logo\">\n//   <img className=\"logo-brand\" alt=\"logo\" src={require('./../../static/assets/images/logo-est.png')} />\n// </div>\nconst Footer = () => {\n  return(\n    <footer>\n      <div className=\"footer-top\">\n\n        <div className=\"footer-contact\">\n          <div>\n            <div className=\"footer-contact-icon\">\n              <i className=\"icon-phone\"></i>\n            </div>\n          </div>\n          <div className=\"footer-contact-text\">\n            <table>\n              <tbody>\n                <tr>\n                  <th><a className=\"link-phone\" href=\"tel:+372-555-1\">555 1234</a></th>\n                  <th>Üldinfo</th>\n                </tr>\n                <tr>\n                  <td><a className=\"link-phone\" href=\"tel:+372-555-1234\">555 1234</a></td>\n                  <td>Teine osakond</td>\n                </tr>\n                <tr>\n                  <td><a className=\"link-phone\" href=\"tel:+372-555-1234\">555 1234</a></td>\n                  <td>Kolmas osakond</td>\n                </tr>\n              </tbody>\n            </table>\n            <a className=\"link-orange\" href=\"http://www.digilugu.ee/\" target=\"_blank\" rel=\"noopener noreferrer\">Kõik kontaktandmed</a>\n          </div>\n        </div>\n      </div>\n    </footer>\n  )\n}\n\nexport default Footer;","import * as React from 'react';\nimport { fullname } from '../../i18n';\n\nconst Header = ({backend}: any) => {\n  let backendUse = backend.use();\n  return(\n    <>\n    <nav className=\"navbar\">\n      <ul className=\"navbar-nav desktop-nav\">\n        <li className=\"nav-item with-logo\">\n          <img className=\"logo-brand\" alt=\"logo\" width=\"170\" src={require('./../../static/assets/images/logo-est.png')} />\n        </li>\n        {backendUse && backendUse.mem.ui.user &&\n          <li className=\"nav-item with-title\">\n            <p className=\"nav-item-title\">Kasutaja</p>\n            <p>{ fullname(backendUse.mem.ui.user) }</p>\n          </li>\n        }\n        {backendUse && backendUse.mem.ui.user &&\n          <li className=\"nav-item nav-logout\">\n            <button className=\"btn btn-logout\" onClick={(ev) => backendUse.login(ev)}>Väljun</button>\n          </li>\n        }\n      </ul>\n    </nav>\n    </>\n  )\n}\n\nexport default Header;","import React from 'react';\nimport Footer from './footer';\nimport Header from './header';\n\nconst VeeraLayout = ({children, backend}: any) => {\n  let backendUse = backend.use();\n  return (\n    <div className={\"wrapper \" + (backendUse && backendUse.mem.ui.user ? 'push' : '')}>\n      { backendUse && backendUse.mem.ui.user &&\n        <Header backend={backend} />\n      }\n      <div className=\"content-wrapper\">\n      <div className=\"workarea\">\n        {children}\n      </div>\n      </div>\n      <Footer />\n    </div>\n  );\n}\nexport default VeeraLayout;","import React from 'react';\nimport PropTypes from 'prop-types';\n\ninterface Props {\n  activeTab: string;\n  label: string;\n  onClick: (tab: string) => void;\n}\n\nexport class Tab extends React.Component<Props, {}> {\n  static propTypes = {\n    activeTab: PropTypes.string.isRequired,\n    label: PropTypes.string.isRequired,\n    onClick: PropTypes.func.isRequired,\n  };\n\n  onClick = () => {\n    const { label, onClick } = this.props;\n    onClick(label);\n  }\n\n  render() {\n    const {\n      onClick,\n      props: {\n        activeTab,\n        label,\n      },\n    } = this;\n\n    let className = 'sidebar-item';\n\n    if (activeTab === label) {\n      className += ' active';\n    }\n\n    return (\n      <li\n        className={className}\n        onClick={onClick}\n        style={{cursor: 'pointer'}}\n      >\n        {label}\n      </li>\n    );\n  }\n}\n\nexport default Tab;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport Tab from './Tab';\n\ninterface Props {\n  children: React.ReactElement<any>[];\n}\n\ninterface State {\n  activeTab: string;\n}\n\ndeclare module 'react' {\n  interface HTMLAttributes<T> extends AriaAttributes, DOMAttributes<T> {\n    // extends React's HTMLAttributes\n    label?: string;\n  }\n}\n\nclass Tabs extends React.Component<Props, State> {\n  static propTypes = {\n    children: PropTypes.instanceOf(Array).isRequired,\n  }\n\n  constructor(props: Props) {\n    super(props);\n\n    this.state = {\n      activeTab: this.props.children[0].props.label,\n    };\n  }\n\n  onClickTabItem = (tab: string) => {\n    this.setState({ activeTab: tab });\n  }\n\n  render() {\n    const {\n      onClickTabItem,\n      props: {\n        children,\n      },\n      state: {\n        activeTab,\n      }\n    } = this;\n\n    return (\n      <div>\n        <div id=\"sidebar\">\n          <ol>\n            {children.filter(c => c.props.label !== undefined).map((child) => {\n              const { label } = child.props;\n\n              return (\n                <Tab\n                  activeTab={activeTab}\n                  key={label}\n                  label={label}\n                  onClick={onClickTabItem}\n                />\n              );\n            })}\n          </ol>\n        </div>\n        <div className=\"section\">\n          {children.map((child) => {\n            if (child.props.label !== activeTab) return undefined;\n            return child.props.children;\n          })}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Tabs;","import { ConsentServiceBackend } from \"./backendAPI\";\nimport { Consent } from \"../types\";\nimport React from \"react\";\nimport { Modal, Button } from \"react-bootstrap\";\nimport { formatTimestamp } from \"./CSEnduserUI\";\nimport { isConsentActive } from \"./MyConsents\";\nimport { business } from \"../../../i18n\";\nimport { renderText } from \"../../../util\";\n\nexport const ConsentModal: React.FC<{backend: ConsentServiceBackend, consent: Consent, buttonText : string}> = ({backend, consent, buttonText}) => {\n\n    const [show, setShow] = React.useState(false);\n    const handleClose = () => setShow(false);\n    const handleShow = () => setShow(true);\n\n    const handleRevoke = (ev:any) => {\n      setShow(false);\n      backend.revokeConsent(ev, consent.consentReference);\n    }\n\n    if (backend.mem === undefined) {\n        return null;\n      }\n      const dec = backend.mem.db.purposeDeclarations.find(p => p.purposeDeclarationId === consent.purposeDeclarationId);\n      if (dec === undefined) {\n        return null;\n      }\n\n      const rowView = (name: string, value: any, last?: boolean) => {\n        return (\n          <div className=\"row\" key={name}>\n            <div className=\"col-md\">\n              <div className= { last ? \"d-flex align-items-end\" : \"d-flex align-items-baseline\" }>\n                <div><h4> { name }</h4></div>\n                <div>{ value }</div>\n              </div>\n              </div>\n          </div>\n        )\n      }\n\n    const Body = () => {\n      let services = dec.services.map(sdref => {\n        const sd = backend.getServiceDeclaration(sdref);\n        if (sd === undefined) {\n          return <></>;\n        }\n        return (\n          <>\n            <h4>{sd.name}</h4>\n            { renderText(sd.description) }\n          </>\n        )\n      })\n      return (\n        <div className=\"tab-info\">\n          { rowView('Nõusoleku saaja:', `${business(dec.clientId, \"name\")} (${business(dec.clientId, \"ntr\")})`) }\n          { rowView('Rakendus:', `${ business(dec.clientId, \"appname\") }` ) }\n          { rowView('Nõusolek antud:', formatTimestamp(consent.validFrom)) }\n          { isConsentActive(consent)\n              ? rowView('Nõusolek kehtib kuni:', formatTimestamp(consent.validUntil))\n              : rowView('Nõusolek tühistatud:', formatTimestamp(consent.validUntil)) }\n          { rowView('Eesmärk:', renderText(dec.description), true) }\n          { rowView(`Nõusoleku alusel saab ${business(dec.clientId, \"name\")} Sinu kohta järgmised andmed:`, services, true)}\n        </div>\n      )\n    }\n\n    return (\n    <>\n      <Modal show={show} onHide={handleClose} size=\"lg\">\n        <Modal.Header>\n          <Modal.Title>Detailid</Modal.Title>\n        </Modal.Header>\n        <Modal.Body>\n          <Body />\n        </Modal.Body>\n        <Modal.Footer>\n          { isConsentActive(consent) &&\n          <Button variant=\"primary\" onClick={(ev:any) => handleRevoke(ev)}>\n            Võtan nõusoleku tagasi\n          </Button>\n          }\n          <Button variant=\"secondary\" onClick={handleClose}>\n            Sule\n          </Button>\n        </Modal.Footer>\n      </Modal>\n      <Button variant=\"primary\" onClick={handleShow}>\n        { buttonText }\n      </Button>\n    </>\n    )\n};","import { ConsentServiceBackend } from './backendAPI';\nimport React from 'react';\nimport { Consent } from '../types';\nimport { formatTimestamp } from './CSEnduserUI';\nimport { ConsentModal } from './ConsentModal';\nimport { business } from '../../../i18n';\n\nexport function isConsentActive(consent : Consent) {\n  return !consent.revoked && consent.validUntil > Date.now()/1000;\n}\n\nfunction consentDescription(c : Consent) {\n  return (\n    `${business(c.clientId, \"name\")}; ${business(c.clientId, \"appname\")}; Nõusolek antud ${formatTimestamp(c.validFrom)}` +\n    ` – ${ c.revoked ? \"nõusolek tühistatud\" : \"kehtib kuni\" } ${formatTimestamp(c.validUntil)}`\n  );\n}\n\nexport const MyConsents = (backend :  ConsentServiceBackend) => {\n\n  const Table = (consents : Consent[], header : JSX.Element) => {\n    return (\n      <>\n        <h4>{ header }</h4>\n        <table className=\"table align-middle\">\n          <tbody>\n            { consents.map( c => (\n              <tr key={c.clientId}>\n                <td>{ consentDescription(c) }</td>\n                <td><ConsentModal backend={backend} consent={c} buttonText=\"Vaata lähemalt\"/></td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </>\n    )\n  }\n\n  const Body = (backend : ConsentServiceBackend) => {\n\n    if (backend.getConsents().length === 0) {\n      return (\n        <p>Nõusolekuid ei leitud.</p>\n      )\n    }\n\n    const header = (title: string, length: number) => (\n      <h4>\n        <span>{title}</span>\n        {length === 0 &&\n          <span className=\"badge badge-default ml-2\">\n            <span className=\"badge-text\">Puuduvad</span>\n          </span>\n        }\n      </h4>\n    )\n\n    return (\n      <>\n        { Table( backend.getConsents(true),  header(\"Kehtivad nõusolekud:\", backend.getConsents(true).length)) }\n        { Table( backend.getConsents(false), header(\"Kehtetud nõusolekud:\", backend.getConsents(false).length)) }\n      </>\n    )\n  }\n\n  return (\n    <div label = \"Minu nõusolekud\"> { Body(backend) } </div>\n  )\n}\n","import { ConsentServiceBackend } from './backendAPI';\nimport { UsageRecord } from '../types';\nimport React from 'react';\nimport { formatTimestamp } from './CSEnduserUI';\nimport { ConsentModal } from './ConsentModal';\nimport { business } from '../../../i18n';\n\nfunction usageRecordDescription(u: UsageRecord) {\n  if (u.result === 'OK') {\n    return formatTimestamp(u.usageTime, true) + ' ' + business(u.clientId, \"name\") + ' sai Sinu andmed nõusoleku alusel';\n  } else if (u.consentReference) {\n    return formatTimestamp(u.usageTime, true) + ' ' + business(u.clientId, \"name\") + ' küsis, kuid ei saanud Sinu andmeid tühistatud nõusoleku alusel';\n  } else {\n    return formatTimestamp(u.usageTime, true) + ' ' + business(u.clientId, \"name\") + ' küsis, kuid ei saanud Sinu andmeid nõusoleku puudumise tõttu';\n  }\n} \n\nexport const ConsentHistory = (backend : ConsentServiceBackend) => {\n\n  const Modal = (backend : ConsentServiceBackend, consentReference : string) => {\n    if (!backend.mem) {\n      return;\n    }\n    const con = backend.mem.db.consents.find(c => c.consentReference === consentReference);\n    if (!con) {\n      return;\n    }\n    return (<td><ConsentModal backend={backend} consent={con} buttonText=\"Vaata nõusolekut\"/></td>)\n  }\n\n  const Body = (backend : ConsentServiceBackend) => {\n    if (backend.getUsageLogRecords().length === 0) {\n      return (\n        <p>Nõusolekute kasutamise sündmusi ei leitud.</p>\n      )\n    }\n    return (\n      <>\n        <h4>Ajalugu:</h4>\n        <table className=\"table align-middle\">\n          <tbody>\n          {\n            backend.getUsageLogRecords().map(\n              u => (\n                <tr key={u.clientId}>\n                  <td>{ usageRecordDescription(u) }</td>\n                  { u.consentReference ? Modal(backend, u.consentReference) : (<></>) }\n                </tr>\n              )\n            )\n          }\n          </tbody>\n        </table>\n      </>\n    )\n  } \n\n  return (\n    <div label=\"Nõusolekute kasutamise ajalugu\">\n      { Body(backend) }\n    </div>\n  );\n};\n","import React from 'react';\nimport { BackendStateUpdater } from '../../../postMessage';\nimport { ConsentServiceState, PurposeDeclaration } from '../types';\nimport { ConsentServiceBackend, Backend, CSBackend } from './backendAPI';\nimport VeeraLayout from './../../../components/veera/layout';\nimport Tabs from './../../../components/tabs/Tabs';\nimport { MyConsents } from './MyConsents';\nimport { ConsentHistory } from './ConsentHistory';\nimport { business } from '../../../i18n';\nimport { renderText } from '../../../util';\nimport { Modal, Button } from \"react-bootstrap\";\n\n\nfunction LoginScreen() {\n  return (\n    <div className=\"section\">\n      <h4>Nõusoleku andmiseks sisene Tervise- ja Heaolu Infosüsteemide Keskuse nõusolekute andmise keskkonda:</h4>\n      <p className=\"mt-3\"><a href=\"../../ui/ria\" className=\"btn btn-primary\">Sisene</a></p>\n    </div>\n  );\n}\n\ninterface APDProps {\n  backend: ConsentServiceBackend;\n  activeDecl?: PurposeDeclaration;\n  tabRef: React.RefObject<Tabs>;\n  label: string;\n}\n\ninterface State {\n  signPopup: boolean;\n  returnPopup: boolean;\n  savedClientId?: string;  \n}\n\nclass ActivePurposeDeclaration extends React.PureComponent<APDProps, State> {\n  state : State = {\n    signPopup: false,\n    returnPopup: false,\n  };\n\n  constructor(props: APDProps) {\n    super(props);\n    this.showConsentTab = this.showConsentTab.bind(this);\n  }\n\n  showSignPopup(show: boolean) {\n    this.setState(s => ({ ...s, signPopup: show }));\n  }\n\n  showReturnPopup(show = true, clientId?: string) {\n    this.setState(s => ({ ...s, returnPopup: show, savedClientId: clientId }))\n  }\n\n  toggleSignPopup() {\n    this.setState(s => ({ ...s, signPopup: !s.signPopup }))\n  }\n\n  showConsentTab(ev: any) {\n    ev.preventDefault();\n    if (this.props.tabRef.current) this.props.tabRef.current.onClickTabItem(\"Minu nõusolekud\");\n  };\n\n  Popover() {\n    return (\n      <>\n        <Modal show={this.state.signPopup} onHide={() => this.toggleSignPopup()}>\n          <Modal.Body>\n            <h4>Nõusoleku andmiseks allkirjasta nõusolek digitaalselt</h4>\n          </Modal.Body>\n          <Modal.Footer>\n            <button className=\"btn btn-primary\" onClick={(ev) => {\n              this.props.backend.giveConsentByPurpose(\n                ev,\n                this.props.activeDecl!.services,\n                this.props.activeDecl!.clientId,\n                this.props.activeDecl!.purposeDeclarationId\n              );\n              this.toggleSignPopup();\n              this.showReturnPopup(true, this.props.activeDecl!.clientId);\n            }}>Allkirjasta</button>\n            <Button variant=\"secondary\" onClick={(ev:any) => this.toggleSignPopup()}>\n              Tagasi\n            </Button>\n          </Modal.Footer>\n        </Modal>\n        <Button variant=\"primary\" className=\"mr-2\" onClick={(ev:any) => this.toggleSignPopup()}>\n          Anna nõusolek\n        </Button>\n        <Button variant=\"secondary\" onClick={(ev:any) => window.close()}>\n          Ei anna nõusolekut\n        </Button>\n      </>\n    );\n  }\n\n  ReturnScreen() {\n    return (\n    <div>\n      <h4>Nõusolek { business(this.state.savedClientId!, \"name\") }-le on antud!</h4>\n      <p>Kõiki oma antud nõusolekuid näed ja saad hallata siit <a href=\"../../ui/csui\" onClick={this.showConsentTab}>Minu nõusolekud</a></p>\n      <button className=\"btn btn-primary\" onClick={() => {\n          window.close();\n          this.showReturnPopup(false);\n        }}>Tagasi teenusesse</button>\n    </div>\n    );\n  }\n\n  render() {\n\n    const activeDecl = this.props.activeDecl;\n\n    if (activeDecl === undefined) {\n      if (this.state.returnPopup) {\n        return this.ReturnScreen();\n      } else {\n        return (<div>Avatud taotlust pole.</div>);\n      }\n    }\n\n    return (\n        <div className=\"tab-info\">\n          <h4 className=\"mb-4 title\">{ business(activeDecl.clientId, \"name\") } ({ business(activeDecl.clientId, \"ntr\") }) küsib nõusolekute järgmistel tingimustel:</h4>\n            <div className=\"row\">\n              <div className=\"col-md\">\n                <div className=\"d-flex align-items-baseline\">\n                  <div><h4>Kirjeldus:</h4></div>\n                  <div>\n                    { renderText(activeDecl.description) }\n                  </div>\n                </div>\n              </div>\n            </div>\n\n            <div className=\"row\">\n              <div className=\"col-md\">\n                <div className=\"d-flex align-items-end\">\n                  <div><h4>Kehtivus:</h4></div>\n                  <div>{activeDecl.validUntil && `Kehtib kuni: ${ formatTimestamp(activeDecl.validUntil)}`}</div>\n                </div>\n              </div>\n            </div>\n            <div className=\"row\">\n              <div className=\"col-md\">\n                <div className=\"d-flex align-items-end\">\n                  <div><h4>Nõusoleku alusel saab { business(activeDecl.clientId, \"name\") } Sinu kohta järgmised andmed:</h4></div>\n                  <div>\n                    {\n                      activeDecl.services.map(sdref => {\n                        const sd = this.props.backend.getServiceDeclaration(sdref);\n                        if (sd === undefined) {\n                          return <></>;\n                        }\n                        return (\n                          <>\n                            <h4>{sd.name}</h4>\n                            { renderText(sd.description) }\n                          </>\n                        )\n                      })\n                    }\n                  </div>\n                </div>\n              </div>\n            </div>\n            <div className=\"row\">\n              <div className=\"col-md mt-4 mb-2 text-muted\">\n                Antud nõusoleku saad igal ajal tühistada oma nõusolekute vaatest <a href=\"../../ui/csui\" onClick={this.showConsentTab}>Minu nõusolekud</a>\n              </div>\n            </div>\n            <p className=\"mt-4\">\n              { this.Popover() }\n            </p>\n          </div>\n    );\n  }\n};\n\nconst MainView = ({backend, tabRef}: any) => {\n\n  let backendUse = backend.use();\n\n  if (backendUse === null || backendUse === undefined) {\n    return (\n      <>\n      <div className=\"section\">Wait, or reinit the client UI from the arena window... '{window.name}'</div>\n      </>\n    );\n  }\n\n  if (backendUse.mem!.ui.user === undefined) {\n    return LoginScreen();\n  }\n\n  const activeDecl = backendUse.getActivePurposeDeclaration();\n\n  return (\n    <Tabs ref={tabRef}>\n      <div label=\"Avatud taotlused\">\n        <ActivePurposeDeclaration label=\"Avatud taotlused\" backend={backendUse} activeDecl={activeDecl} tabRef={tabRef}/>\n      </div>\n      { MyConsents(backendUse) }\n      { ConsentHistory(backendUse) }\n    </Tabs>\n  )\n}\n\n\n\nexport class CSEnduserUI extends React.PureComponent<{}, ConsentServiceBackend> {\n  backendLink: BackendStateUpdater<ConsentServiceState, ConsentServiceBackend>;\n  backend: Backend;\n  ref: React.RefObject<any>;\n\n  constructor(props: any, context?: any) {\n    super(props, context);\n    this.backendLink = new BackendStateUpdater(csb => { this.setState(csb as ConsentServiceBackend); }, ConsentServiceBackend);\n    this.backend = new Backend();\n    this.ref = React.createRef();\n  }\n\n  componentDidMount() {\n    if (process.env.NODE_ENV === \"development\") {\n      require('../../../static/css/mta_visuaal.css');\n    }\n    document.body.classList.add('temp');\n    this.backendLink.resetState();\n  }\n\n  render() {\n    return (\n      <CSBackend.Provider value={this.state}>\n        <VeeraLayout backend={this.backend}>\n          <MainView backend={this.backend} tabRef={this.ref} />\n        </VeeraLayout>\n      </CSBackend.Provider>\n    );\n  }\n}\n\nexport function formatTimestamp(timestamp : number, withTime? : boolean) {\n  if (withTime) {\n    return Intl.DateTimeFormat(\n      'et',\n      {\n        year : 'numeric',\n        month : 'numeric',\n        day : 'numeric',\n        hour : 'numeric',\n        minute : 'numeric',\n        second : 'numeric'\n      }\n    ).format(new Date(timestamp*1000));\n  }\n  return Intl.DateTimeFormat('et').format(new Date(timestamp*1000));\n}\n","import React from 'react';\nimport { BackendStateUpdater } from '../../../postMessage';\nimport { ConsentServiceState } from '../types';\nimport { ConsentServiceBackend, Backend, CSBackend } from './backendAPI';\n\n\nexport class Ria extends React.PureComponent<{}, ConsentServiceBackend> {\n  backendLink: BackendStateUpdater<ConsentServiceState, ConsentServiceBackend>;\n  backend: Backend;\n\n  constructor(props: any, context?: any) {\n    super(props, context);\n    this.backendLink = new BackendStateUpdater(csb => { this.setState(csb as ConsentServiceBackend); }, ConsentServiceBackend);\n    this.backend = new Backend();\n  }\n\n  componentDidMount() {\n    if (process.env.NODE_ENV === \"development\") {\n      require('../../../static/assets/tara/main.css');\n    }\n    this.backendLink.resetState();\n  }\n\n  render() {\n    return (\n      <CSBackend.Provider value={this.state}>\n        <MainView backend={this.backend} />\n      </CSBackend.Provider>\n    )\n  }\n\n}\n\nconst MainView = ({backend}: any) => {\n  let backendUse = backend.use();\n  if (!backendUse) return (<p>Backend failed, close and reopen window.</p>)\n  let click = (ev: React.MouseEvent<HTMLButtonElement>) => {\n    ev.preventDefault();\n    backendUse.login(ev, (ev.currentTarget.form!.elements[0] as any).value)\n    window.location.href = \"../csui\";\n  }\n  return(\n    <div className=\"c-layout\">\n      <div className=\"c-layout--full\">\n        <div className=\"c-header-bar\">\n          <div className=\"container\">\n            <div className=\"d-flex justify-content-between align-items-center\">\n              <header role=\"banner\">\n                <h1 aria-label=\"Riigi autentimisteenus\" aria-hidden=\"true\"></h1>\n                <p aria-label=\"Turvaline autentimine asutuste e-teenustes\">Turvaline autentimine asutuste e-teenustes</p>\n              </header>\n            </div>\n          </div>\n        </div>\n        <div className=\"c-header\">\n          <div className=\"container\">\n            <div className=\"c-header__logo\">\n              <div className=\"c-header__logo-link\">\n              <img src={require('./../../../static/assets/tara/tara-logo-et.png')} aria-hidden=\"true\" alt=\"\" /></div>\n            </div>\n          </div>\n        </div>\n        <div className=\"container\">\n          <div className=\"c-tab-login\">\n            <main role=\"main\" className=\"c-tab-login__main\">\n              <div className=\"c-tab-login__content is-active\" data-tab=\"mobile-id\" aria-hidden=\"false\">\n                <div className=\"c-tab-login__content-wrap\">\n                  <div className=\"c-tab-login__content-icon\">\n                    <svg role=\"img\" aria-label=\"\" className=\"icon icon-mobile-id\"><use href=\"#icon-mobile-id\"></use></svg>\n                  </div>\n                <div className=\"c-tab-login__content-text\">\n                  <div role=\"heading\">\n                    <h2>Mobiil-ID</h2>\n                  </div>\n                  <p>Sisselogimiseks vajate kehtivat Mobiil-ID lepingut. Sisenemiseks Mobiil-ID-ga sisestage oma isikukood ja telefoninumber. Seejärel saadetakse Teie mobiiltelefonile kontrollsõnum.</p>\n                  <form>\n                    <table>\n                      <tbody>\n                        <tr>\n                          <td className=\"col-label\">\n                            <label htmlFor=\"mid-personal-code\" className=\"form-label\">Isikukood</label>\n                          </td>\n                          <td>\n                            <div className=\"input-group\">\n                              <div className=\"input-group-prepend\">\n                                <span className=\"input-group-text\">EE</span>\n                              </div>\n                              <input type=\"text\" id=\"mid-personal-code\" className=\"form-control\" name=\"principalCode\" defaultValue=\"47302200234\" />\n                            </div>\n                          </td>\n                          </tr>\n                          <tr>\n                            <td className=\"col-label\">\n                              <label htmlFor=\"mid-phone-number\" className=\"form-label\">Telefoninumber</label>\n                            </td>\n                            <td>\n                              <div className=\"input-group\">\n                                <div className=\"input-group-prepend\">\n                                  <span className=\"input-group-text\">+372</span>\n                                </div>\n                                <input type=\"tel\" id=\"mid-phone-number\" className=\"form-control\" name=\"mobileNumber\" defaultValue=\"53883333\" /></div>\n                              </td>\n                            </tr>\n                            <tr>\n                              <td></td>\n                              <td>\n                                <button className=\"c-btn c-btn--primary\" onClick={(ev) => click(ev)}>Jätkan</button>\n                              </td>\n                            </tr>\n                          </tbody>\n                        </table>\n                      </form>\n                    </div>\n                  </div>\n                  <div className=\"c-tab-login__footer\">\n                    <p><a href=\"https://tim.www.eesti.ee/tim/cancel-auth\">Tagasi teenusepakkuja juurde</a></p>\n                    <p>\n                      <a href=\"https://www.id.ee/?id=35803&amp;group_id=1\" target=\"_blank\" rel=\"noopener noreferrer\">Abi id.ee lehelt</a>\n                    </p>\n                  </div>\n                </div>\n              </main>\n            </div>\n          </div>\n          <p className=\"link-back-mobile\">\n            <a href=\"https://tim.www.eesti.ee/tim/cancel-auth\">Tagasi teenusepakkuja juurde</a>\n          </p>\n          <svg aria-hidden=\"true\" className=\"c-inline-svg__hidden\" version=\"1.1\" xmlns=\"http://www.w3.org/2000/svg\">\n            <defs>\n            <symbol id=\"icon-mobile-id\" viewBox=\"0 0 20 32\">\n            <title>mobile-id</title>\n            <path d=\"M7.218 28.027h5.476v1.12h-5.476zM15.876 31.68h-12.089c-0 0-0 0-0 0-1.8 0-3.261-1.454-3.271-3.252v-24.854c0.005-1.803 1.468-3.262 3.271-3.262 0 0 0 0 0 0h12.089c0 0 0 0 0 0 1.803 0 3.266 1.459 3.271 3.262v24.845c-0.005 1.803-1.468 3.262-3.271 3.262 0 0 0 0 0 0v0zM3.787 1.422c0 0 0 0-0 0-1.19 0-2.155 0.962-2.16 2.151v22.045h16.409v-22.044c0 0 0 0 0-0 0-1.188-0.963-2.151-2.151-2.151-0.003 0-0.006 0-0.009 0h0zM1.627 28.418c0.005 1.189 0.97 2.151 2.16 2.151 0 0 0 0 0 0h12.089c0 0 0 0 0 0 1.19 0 2.155-0.962 2.16-2.151v-1.689h-16.409zM12.382 8.951c-0.721-0.218-1.55-0.343-2.408-0.343-0.544 0-1.076 0.050-1.592 0.147l0.053-0.008c-0.018 0.004-0.039 0.006-0.060 0.006-0.154 0-0.282-0.108-0.313-0.252l-0-0.002c-0.009-0.089 0-0.169 0.053-0.231 0.047-0.068 0.119-0.117 0.202-0.133l0.002-0c0.494-0.094 1.063-0.147 1.644-0.147 0.922 0 1.813 0.135 2.653 0.386l-0.065-0.017c0.132 0.040 0.226 0.16 0.226 0.302 0 0.174-0.141 0.315-0.315 0.315-0.032 0-0.062-0.005-0.091-0.013l0.002 0.001zM14.187 11.396c-0 0-0.001 0-0.001 0-0.066 0-0.127-0.020-0.178-0.054l0.001 0.001c-1.129-0.791-2.531-1.263-4.043-1.263-1.375 0-2.659 0.391-3.747 1.067l0.030-0.017c-0.049 0.032-0.109 0.051-0.174 0.051-0.113 0-0.213-0.059-0.27-0.148l-0.001-0.001c-0.033-0.049-0.053-0.108-0.053-0.173 0-0.116 0.064-0.217 0.158-0.271l0.002-0.001c1.151-0.716 2.547-1.141 4.043-1.141 1.65 0 3.18 0.517 4.435 1.397l-0.025-0.016c0.142 0.089 0.178 0.293 0.089 0.436-0.059 0.081-0.153 0.133-0.26 0.133-0.002 0-0.005-0-0.007-0h0zM5.236 13.92c-0.176-0.001-0.318-0.144-0.318-0.32 0-0.070 0.023-0.135 0.061-0.188l-0.001 0.001c1.147-1.527 2.954-2.505 4.99-2.505 1.961 0 3.709 0.907 4.85 2.324l0.009 0.012c0.107 0.142 0.089 0.338-0.053 0.444-0.053 0.041-0.121 0.066-0.195 0.066-0.101 0-0.19-0.046-0.249-0.119l-0-0.001c-1.035-1.279-2.604-2.090-4.364-2.090-1.826 0-3.448 0.874-4.471 2.227l-0.010 0.014c-0.057 0.078-0.146 0.13-0.248 0.133l-0.001 0zM5.556 17.138c-0.003 0-0.006 0-0.009 0-0.172 0-0.311-0.139-0.311-0.311 0-0 0-0 0-0v0-0.018c0.161-2.486 2.216-4.441 4.728-4.441 2.137 0 3.943 1.415 4.534 3.358l0.009 0.034c0.004 0.018 0.006 0.039 0.006 0.061 0 0.177-0.143 0.32-0.32 0.32-0.128 0-0.238-0.075-0.289-0.183l-0.001-0.002v-0.018c-0.511-1.722-2.079-2.956-3.936-2.956-2.181 0-3.963 1.703-4.091 3.852l-0.001 0.011c-0.010 0.164-0.145 0.293-0.311 0.293-0.003 0-0.007-0-0.010-0h0zM7.004 19.387c-0.176-0-0.319-0.144-0.319-0.32 0-0.025 0.003-0.050 0.008-0.073l-0 0.002c0.082-0.236 0.129-0.507 0.129-0.79 0-0.116-0.008-0.231-0.023-0.343l0.001 0.013c-0.085-0.277-0.134-0.596-0.134-0.926 0-1.802 1.461-3.262 3.262-3.262 1.579 0 2.896 1.122 3.197 2.612l0.004 0.021c0.142 0.587 0.213 1.182 0.204 1.778 0 0.178-0.142 0.32-0.32 0.32-0.17-0.005-0.306-0.141-0.311-0.311v-0c0-0.551-0.062-1.102-0.178-1.636-0.291-1.16-1.325-2.005-2.556-2.005-1.453 0-2.631 1.178-2.631 2.631 0 0.222 0.028 0.439 0.080 0.645l-0.004-0.018c0.080 0.329 0.044 0.809-0.107 1.422-0.036 0.137-0.157 0.236-0.302 0.24h-0zM8.311 20.151l-0.089-0.009c-0.128-0.041-0.219-0.158-0.219-0.297 0-0.034 0.005-0.066 0.015-0.096l-0.001 0.002c0.169-0.456 0.266-0.982 0.266-1.531 0-0.244-0.019-0.483-0.056-0.717l0.003 0.026c-0.059-0.17-0.093-0.367-0.093-0.571 0-0.992 0.804-1.796 1.796-1.796 0.892 0 1.632 0.65 1.772 1.503l0.001 0.010c0.213 0.836 0.222 1.804 0.027 2.88-0.001 0.176-0.144 0.319-0.32 0.319s-0.32-0.143-0.32-0.32c0-0.038 0.007-0.074 0.018-0.107l-0.001 0.002c0.178-0.987 0.169-1.867-0.018-2.631-0.128-0.51-0.583-0.882-1.124-0.882-0.639 0-1.158 0.518-1.158 1.158 0 0.098 0.012 0.193 0.035 0.284l-0.002-0.008c0.16 0.64 0.089 1.502-0.222 2.56-0.043 0.13-0.163 0.222-0.305 0.222-0.002 0-0.005-0-0.007-0h0zM9.804 20.329c-0.172-0.005-0.31-0.147-0.31-0.32 0-0.025 0.003-0.050 0.008-0.073l-0 0.002c0.159-0.552 0.256-1.187 0.267-1.843l0-0.006c0-0.311-0.036-0.622-0.107-0.916-0.001-0.008-0.001-0.017-0.001-0.026 0-0.177 0.143-0.32 0.32-0.32 0.131 0 0.244 0.079 0.294 0.192l0.001 0.002c0.089 0.356 0.124 0.711 0.116 1.067-0.010 0.716-0.113 1.403-0.298 2.056l0.014-0.056c-0.036 0.137-0.157 0.236-0.302 0.24h-0z\"></path>\n          </symbol>\n          </defs>\n        </svg>\n      </div>\n    </div>\n  )\n}","import React, { Suspense } from 'react';\nimport './App.css';\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\nimport { Theatre } from './components/Theatre';\nimport { useTranslation } from 'react-i18next';\nimport { CSEnduserUI } from './process/consentService/altUI/CSEnduserUI';\nimport { Ria } from './process/consentService/altUI/ria';\n\nconst Page = () => {\n  const { i18n } = useTranslation();\n\n  const changeLanguage = (lng: string) => {\n    i18n.changeLanguage(lng);\n  };\n\n  return (\n    <div className=\"App\">\n        <Router basename=\".\">\n          <Switch>\n            <Route path=\"(.*)/ui/ria\">\n              <Ria/>\n            </Route>\n            <Route path=\"(.*)/ui/csui\">\n              <CSEnduserUI/>\n            </Route>\n            <Route path=\"/\">\n              <nav className=\"navbar navbar-light bg-light mb-4\">\n                <span className=\"navbar-brand\">\n                  <img alt=\"logo\" src={require('./logo.svg')} width=\"40\" />\n                </span>\n                <div className=\"language\">\n                  <a href=\"#!\"\n                    onClick={(e) => {e.preventDefault(); changeLanguage('et')}}\n                    className={ i18n.language === 'et' ? 'active': '' }>et</a>\n                  <a href=\"#!\"\n                    onClick={(e) => {e.preventDefault(); changeLanguage('en')}}\n                    className={ i18n.language === 'en' || i18n.language === 'en-US' ? 'active': '' }>en</a>\n                </div>\n              </nav>\n              <div className=\"container-fluid\">\n                <Theatre/>\n              </div>\n            </Route>\n          </Switch>\n        </Router>\n    </div>\n  );\n}\n\n// loading component for suspense fallback\nconst Loader = () => (\n  <div className=\"App\">\n    <div>loading...</div>\n  </div>\n);\n\nconst App: React.FC = () => {\n  return (\n    <Suspense fallback={<Loader />}>\n      <Page />\n    </Suspense>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { createStore, combineReducers, applyMiddleware } from \"redux\";\nimport thunkMiddleware from \"redux-thunk\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\n\nimport { queueListener } from \"./components/Arena\";\nimport { reduceTheatre } from \"./components/Theatre\";\nimport { registerGlobalListener } from \"./postMessage\";\n\nconst rootReducer = combineReducers({\n\ttheatre: reduceTheatre,\n});\n\n\nexport type AppState = ReturnType<typeof rootReducer>;\n\nexport default function configureStore() {\n\t  const middlewares = [thunkMiddleware];\n\t  const middleWareEnhancer = applyMiddleware(...middlewares);\n\n\t  const store = createStore(\n\t\t      rootReducer,\n\t\t      composeWithDevTools(middleWareEnhancer)\n\t  );\n\n\tstore.subscribe(() => queueListener(store));\n\n\tregisterGlobalListener(store);\n\n\treturn store;\n}\n\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { Provider } from \"react-redux\";\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport configureStore from './store';\nimport './i18n';\n\nconst store = configureStore();\n\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/user-icon.bdeaa261.svg\";","module.exports = __webpack_public_path__ + \"static/media/login.9f370677.svg\";"],"sourceRoot":""}